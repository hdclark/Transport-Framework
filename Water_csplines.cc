//Water_csplines.cc - Basic, non-interactive module for handling water mediums. Uses a csplines generated from a lookup table for mass attenutation coefficients.
//
//Programming notes:
//  -Do not make items here "const", because they will not show up when loading.
//  -Avoid using macro variables here because they will be obliterated during loading.
//  -Wrap dynamically-loaded code with extern "C", otherwise C++ compilation will mangle function names, etc.
//
// From man page for dlsym/dlopen:  For running some 'initialization' code prior to finishing loading:
// "Instead,  libraries  should  export  routines using the __attribute__((constructor)) and __attribute__((destructor)) function attributes.  See the gcc 50.0o pages for
//       50.0ormation on these.  Constructor routines are executed before dlopen() returns, and destructor routines are executed before dlclose() returns."
//   ---for instance, we can use this to seed a random number generator with a random seed. However, in order to pass in a specific seed (and pass that seed to the library)
//      we need to define an explicitly callable initialization function. In general, these libraries should have both so that we can quickly adjust behaviour if desired.
//  

#include <iostream>
#include <string>
#include <vector>

#include <cmath>

#include "./Misc.h" //Using isininc macro from here.

#include "./Constants.h"
#include "./Structs.h"
 
#ifdef __cplusplus
    extern "C" {
#endif

std::string MODULE_NAME(__FILE__);
std::string FILE_TYPE("MEDIUM");
std::string MEDIUM_TYPE("WATER");

bool VERBOSE = false;


//const double water_mass_density = 1.000; // $\rho = \frac{1\:g}{1\:cm^{3}}$

/*
//Coherent.
static float mass_coeff_coherent [][2] = { {0.0010, 1.37},
        {0.0015, 1.27},
        {0.0020, 1.15},
        {0.0030, 0.909},
        {0.0040, 0.708},
        {0.0050, 0.558},
        {0.0060, 0.449},
        {0.0080, 0.31},
        {0.0100, 0.231},
        {0.0150, 0.133},
        {0.0200, 0.0886},
        {0.0300, 0.0469},
        {0.0400, 0.0287},
        {0.0500, 0.0194},
        {0.0600, 0.0139},
        {0.0800, 0.00816},
        {0.1000, 0.00535},
        {0.1500, 0.00244},
        {0.2000, 0.00139},
        {0.3000, 0.000622},
        {0.4000, 0.000351},
        {0.5000, 0.000225},
        {0.6000, 0.000156},
        {0.8000, 0.0000879},
        {1.0000, 0.0000563},
        {1.2500, 0.000036},
        {1.5000, 0.000025},
        {2.0000, 0.0000141},
        {3.0000, 0.00000626},
        {4.0000, 0.00000352},
        {5.0000, 0.00000225},
        {6.0000, 0.00000156},
        {8.0000, 0.00000088},
        {10.000, 0.000000563},
        {15.000, 0.00000025},
        {20.000, 0.000000141},
        {30.000, 0.0000000626},
        {40.000, 0.0000000352},
        {50.000, 0.0000000225} };

//Compton
static float mass_coeff_compton [][2] = { {0.0010, 0.0132},
        {0.0015, 0.0267},
        {0.0020, 0.0418},
        {0.0030, 0.0707},
        {0.0040, 0.0943},
        {0.0050, 0.112},
        {0.0060, 0.126},
        {0.0080, 0.144},
        {0.0100, 0.155},
        {0.0150, 0.17},
        {0.0200, 0.177},
        {0.0300, 0.183},
        {0.0400, 0.183},
        {0.0500, 0.18},
        {0.0600, 0.177},
        {0.0800, 0.17},
        {0.1000, 0.163},
        {0.1500, 0.147},
        {0.2000, 0.135},
        {0.3000, 0.118},
        {0.4000, 0.106},
        {0.5000, 0.0966},
        {0.6000, 0.0894},
        {0.8000, 0.0786},
        {1.0000, 0.0707},
        {1.2500, 0.0632},
        {1.5000, 0.0574},
        {2.0000, 0.049},
        {3.0000, 0.0385},
        {4.0000, 0.0322},
        {5.0000, 0.0278},
        {6.0000, 0.0245},
        {8.0000, 0.0201},
        {10.000, 0.0171},
        {15.000, 0.0127},
        {20.000, 0.0102},
        {30.000, 0.0074},
        {40.000, 0.00588},
        {50.000, 0.00491} };

//Photoelectric
static float mass_coeff_photoelectric [][2] = { {0.0010, 4080},
        {0.0015, 1370},
        {0.0020, 616},
        {0.0030, 192},
        {0.0040, 82.0},
        {0.0050, 41.9},
        {0.0060, 24.1},
        {0.0080, 9.92},
        {0.0100, 4.94},
        {0.0150, 1.37},
        {0.0200, 0.544},
        {0.0300, 0.146},
        {0.0400, 0.0568},
        {0.0500, 0.0272},
        {0.0600, 0.0149},
        {0.0800, 0.00577},
        {0.1000, 0.00276},
        {0.1500, 0.000731},
        {0.2000, 0.000289},
        {0.3000, 0.0000816},
        {0.4000, 0.0000349},
        {0.5000, 0.0000188},
        {0.6000, 0.0000117},
        {0.8000, 0.00000592},
        {1.0000, 0.00000368},
        {1.2500, 0.00000233},
        {1.5000, 0.00000169},
        {2.0000, 0.00000106},
        {3.0000, 0.000000594},
        {4.0000, 0.000000408},
        {5.0000, 0.000000309},
        {6.0000, 0.000000248},
        {8.0000, 0.000000178},
        {10.000, 0.000000139},
        {15.000, 0.0000000891},
        {20.000, 0.0000000656},
        {30.000, 0.0000000429},
        {40.000, 0.0000000319},
        {50.000, 0.0000000253} };

//Pair+triplet
static float mass_coeff_pair_triplet [][2] = { {0.0010, 0},
        {0.0015, 0},
        {0.0020, 0},
        {0.0030, 0},
        {0.0040, 0},
        {0.0050, 0},
        {0.0060, 0},
        {0.0080, 0},
        {0.0100, 0},
        {0.0150, 0},
        {0.0200, 0},
        {0.0300, 0},
        {0.0400, 0},
        {0.0500, 0},
        {0.0600, 0},
        {0.0800, 0},
        {0.1000, 0},
        {0.1500, 0},
        {0.2000, 0},
        {0.3000, 0},
        {0.4000, 0},
        {0.5000, 0},
        {0.6000, 0},
        {0.8000, 0},
        {1.0000, 0},
        {1.2500, 0.0000178},
        {1.5000, 0.0000982},
        {2.0000, 0.000391},
        {3.0000, 0.00113},
        {4.0000, 0.00187},
        {5.0000, 0.00254},
        {6.0000, 0.00316},
        {8.0000, 0.00421},
        {10.000, 0.00509},
        {15.000, 0.00675},
        {20.000, 0.00798},
        {30.000, 0.00971},
        {40.000, 0.0109},
        {50.000, 0.0118} };


//Total Attenuation
static float mass_coeff_total [][2] = { {0.0010, 4080},
        {0.0015, 1380},
        {0.0020, 617},
        {0.0030, 193},
        {0.0040, 82.8},
        {0.0050, 42.6},
        {0.0060, 24.6},
        {0.0080, 10.4},
        {0.0100, 5.33},
        {0.0150, 1.67},
        {0.0200, 0.81},
        {0.0300, 0.376},
        {0.0400, 0.268},
        {0.0500, 0.227},
        {0.0600, 0.206},
        {0.0800, 0.184},
        {0.1000, 0.171},
        {0.1500, 0.151},
        {0.2000, 0.137},
        {0.3000, 0.119},
        {0.4000, 0.106},
        {0.5000, 0.0969},
        {0.6000, 0.0896},
        {0.8000, 0.0787},
        {1.0000, 0.0707},
        {1.2500, 0.0632},
        {1.5000, 0.0575},
        {2.0000, 0.0494},
        {3.0000, 0.0397},
        {4.0000, 0.034},
        {5.0000, 0.0303},
        {6.0000, 0.0277},
        {8.0000, 0.0243},
        {10.000, 0.0222},
        {15.000, 0.0194},
        {20.000, 0.0181},
        {30.000, 0.0171},
        {40.000, 0.0168},
        {50.000, 0.0167} };


//Etransfer
static float mass_coeff_energy_transfer [][2] = { {0.0010, 4065},
        {0.0015, 1372},
        {0.0020, 615.2},
        {0.0030, 191.7},
        {0.0040, 81.92},
        {0.0050, 41.89},
        {0.0060, 24.06},
        {0.0080, 9.918},
        {0.0100, 4.945},
        {0.0150, 1.374},
        {0.0200, 0.5505},
        {0.0300, 0.1557},
        {0.0400, 0.0695},
        {0.0500, 0.04225},
        {0.0600, 0.03191},
        {0.0800, 0.02598},
        {0.1000, 0.02547},
        {0.1500, 0.02765},
        {0.2000, 0.02969},
        {0.3000, 0.03195},
        {0.4000, 0.03282},
        {0.5000, 0.03303},
        {0.6000, 0.03289},
        {0.8000, 0.03212},
        {1.0000, 0.03111},
        {1.2500, 0.02974},
        {1.5000, 0.02844},
        {2.0000, 0.02621},
        {3.0000, 0.023},
        {4.0000, 0.02091},
        {5.0000, 0.01946},
        {6.0000, 0.01843},
        {8.0000, 0.01707},
        {10.000, 0.01626},
        {15.000, 0.01528},
        {20.000, 0.01495},
        {30.000, 0.0149},
        {40.000, 0.0151},
        {50.000, 0.01537} };

//Eabsorption
static float mass_coeff_energy_absorption [][2] = { {0.0010, 4065},
        {0.0015, 1372},
        {0.0020, 615.2},
        {0.0030, 191.7},
        {0.0040, 81.91},
        {0.0050, 41.88},
        {0.0060, 24.05},
        {0.0080, 9.915},
        {0.0100, 4.944},
        {0.0150, 1.374},
        {0.0200, 0.5503},
        {0.0300, 0.1557},
        {0.0400, 0.06947},
        {0.0500, 0.04223},
        {0.0600, 0.0319},
        {0.0800, 0.02597},
        {0.1000, 0.02546},
        {0.1500, 0.02764},
        {0.2000, 0.02967},
        {0.3000, 0.03192},
        {0.4000, 0.03279},
        {0.5000, 0.03299},
        {0.6000, 0.03284},
        {0.8000, 0.03206},
        {1.0000, 0.03103},
        {1.2500, 0.02965},
        {1.5000, 0.02833},
        {2.0000, 0.02608},
        {3.0000, 0.02281},
        {4.0000, 0.02066},
        {5.0000, 0.01915},
        {6.0000, 0.01806},
        {8.0000, 0.01658},
        {10.000, 0.01566},
        {15.000, 0.01441},
        {20.000, 0.01382},
        {30.000, 0.01327},
        {40.000, 0.01298},
        {50.000, 0.01279} };

//1-g
static float mass_coeff_photon_one_minus_g [][2] = { {0.0010, 1.0},
        {0.0015, 1.0},
        {0.0020, 0.9999},
        {0.0030, 0.9999},
        {0.0040, 0.9999},
        {0.0050, 0.9998},
        {0.0060, 0.9998},
        {0.0080, 0.9998},
        {0.0100, 0.9998},
        {0.0150, 0.9997},
        {0.0200, 0.9997},
        {0.0300, 0.9996},
        {0.0400, 0.9996},
        {0.0500, 0.9996},
        {0.0600, 0.9996},
        {0.0800, 0.9996},
        {0.1000, 0.9996},
        {0.1500, 0.9995},
        {0.2000, 0.9994},
        {0.3000, 0.9992},
        {0.4000, 0.9989},
        {0.5000, 0.9987},
        {0.6000, 0.9984},
        {0.8000, 0.998},
        {1.0000, 0.9975},
        {1.2500, 0.9969},
        {1.5000, 0.9962},
        {2.0000, 0.9948},
        {3.0000, 0.9916},
        {4.0000, 0.988},
        {5.0000, 0.984},
        {6.0000, 0.98},
        {8.0000, 0.9716},
        {10.000, 0.9633},
        {15.000, 0.9432},
        {20.000, 0.9245},
        {30.000, 0.8904},
        {40.000, 0.86},
        {50.000, 0.8323} };
*/


//This is a helper function. The odd name comes from a Maxima cspline interpolation function.
inline double charfun2(double x, double A, double B){
    return (x >= A) && (x < B) ? 1.0 : 0.0;
}

double electron_stopping_power(const double &E){
    return 2.0;  //2.0 MeV/cm.  FIXME - More realistically, this would be continuous. How should I deal with that? Assuming that it is a CONSTANT for the sake of this assignment!
}

double positron_stopping_power(const double &E){
    return 2.0;  //2.0 MeV/cm.  FIXME - More realistically, this would be continuous. How should I deal with that? Assuming that it is a CONSTANT for the sake of this assignment!
}

double photon_mass_coefficient_coherent(const double &E){
    if(!isininc(0.0, E, 50.0)) FUNCERR("Water-Photon-coherent mass coefficient is outside of range of data (0-50 MeV) at " << E );

    return  
(-4.024545730610547E7*pow(E,3.0)+120736.3719183164*pow(E,2.0)-310.6750075917898*E+1.600184092979579)*charfun2(E,0.0,0.0015)+
(-2.755643736757962E-12*pow(E,3.0)+4.133465605136944E-10*pow(E,2.0)-2.1661763652008922E-8*E+4.1667724841095555E-7)*charfun2(E,40.0,50.0)+
(-9.217813162102028E-13*pow(E,3.0)+1.932830700479632E-10*pow(E,2.0)-1.285922403337968E-8*E+2.9931005349589895E-7)*charfun2(E,30.0,40.0)+
(-2.98572309984012E-11*pow(E,3.0)+2.797473541445154E-9*pow(E,2.0)-9.098493817529538E-8*E+1.080567194915056E-6)*charfun2(E,20.0,30.0)+
(-7.420511506895614E-11*pow(E,3.0)+5.458346585678447E-9*pow(E,2.0)-1.442023990599613E-7*E+1.4353502674794952E-6)*charfun2(E,15.0,20.0)+
(-8.585585520387882E-10*pow(E,3.0)+4.0754251249320894E-8*pow(E,2.0)-6.736409690145978E-7*E+4.082543117252678E-6)*charfun2(E,10.0,15.0)+
(-3.095375245967242E-9*pow(E,3.0)+1.078587520671745E-7*pow(E,2.0)-1.3446859771931338E-6*E+6.319359811181131E-6)*charfun2(E,8.0,10.0)+
(-1.4900629082006556E-8*pow(E,3.0)+3.91184844132118E-7*pow(E,2.0)-3.611294713712682E-6*E+1.2363649775233261E-5)*charfun2(E,6.0,8.0)+
(-4.068195436002603E-8*pow(E,3.0)+8.552486991364686E-7*pow(E,2.0)-6.395677843738787E-6*E+1.7932416035285464E-5)*charfun2(E,5.0,6.0)+
(-1.306431868878699E-7*pow(E,3.0)+2.204667187054127E-6*pow(E,2.0)-1.314277028332708E-5*E+2.917757010126596E-5)*charfun2(E,4.0,5.0)+
(-3.267452980884942E-7*pow(E,3.0)+4.557892521461618E-6*pow(E,2.0)-2.255567162095704E-5*E+4.17281052181059E-5)*charfun2(E,3.0,4.0)+charfun2(E,0.0015,0.002)*
(4.1227286530527246E7*pow(E,3.0)-245890.9753465308*pow(E,2.0)+239.266013305481*E+1.325213582530943)+charfun2(E,0.002,0.003)*
(7097705.877683126*pow(E,3.0)-41113.49142946609*pow(E,2.0)-170.2889545286489*E+1.598250227753697)+charfun2(E,0.003,0.004)*
(1565982.938318863*pow(E,3.0)+8672.015024812266*pow(E,2.0)-319.645473891484*E+1.747606747116532)+charfun2(E,2.0,3.0)*
(-2.1923756207581532E-6*pow(E,3.0)+2.1348565425488553E-5*pow(E,2.0)-7.292769033303783E-5*E+9.210012393018671E-5)+charfun2(E,1.5,2.0)*
(-1.5443632277394845E-5*pow(E,3.0)+1.0085610536530869E-4*pow(E,2.0)-2.3194277021267812E-4*E+1.981101771832802E-4)+charfun2(E,1.25,1.5)*
(-4.065740770519655E-5*pow(E,3.0)+2.143180947904164E-4*pow(E,2.0)-4.021357543503397E-4*E+2.8320666925211097E-4)+charfun2(E,1.0,1.25)*
(-1.41034880537762E-4*pow(E,3.0)+5.907336179125368E-4*pow(E,2.0)-8.726551582529903E-4*E+4.7925642087821524E-4)+charfun2(E,0.8,1.0)*
(-2.54541017473682E-4*pow(E,3.0)+9.312520287202969E-4*pow(E,2.0)-0.00121317356906075*E+5.927625578141353E-4)+charfun2(E,0.6,0.8)*
(-.001613505149639077*pow(E,3.0)+.004192765945917245*pow(E,2.0)-.003822384702818309*E+.001288552193482818)+charfun2(E,0.5,0.6)*
(-.002750320301549139*pow(E,3.0)+.006239033219355357*pow(E,2.0)-.005050145066881177*E+.001534104266295391)+charfun2(E,0.3,0.4)*
(-.01533261985478577*pow(E,3.0)+.02575647608104945*pow(E,2.0)-.01506646391046387*E+.003237837061923929)+charfun2(E,0.4,0.5)*
(-.01747926496091623*pow(E,3.0)+.02833245020840598*pow(E,2.0)-.01609685356140649*E+.003375222348716277)+charfun2(E,0.2,0.3)*
(-.2731902556199411*pow(E,3.0)+.2578283482696893*pow(E,2.0)-.08468802556705582*E+.01019999322758312)+charfun2(E,0.15,0.2)*
(-.7859093286162846*pow(E,3.0)+.5654597920674955*pow(E,2.0)-.1462143143266171*E+.01430174581155388)+charfun2(E,0.1,0.15)*
(-7.193885561009603*pow(E,3.0)+3.449049096644488*pow(E,2.0)-0.578752710013166*E+.03592866559588131)+charfun2(E,0.08,0.1)*
(-24.80718479652873*pow(E,3.0)+8.733038867300227*pow(E,2.0)-1.10715168707874*E+.05354196483140045)+charfun2(E,0.06,0.08)*
(-113.1257331831952*pow(E,3.0)+29.92949048010018*pow(E,2.0)-2.802867816102736*E+.09876106160537368)+charfun2(E,0.05,0.06)*
(-212.445380595273*pow(E,3.0)+47.80702701427417*pow(E,2.0)-3.875520008153177*E+.1202141054463825)+charfun2(E,0.04,0.05)*
(-824.4013955986203*pow(E,3.0)+139.6004292647763*pow(E,2.0)-8.465190120678283*E+.1967086073218008)+charfun2(E,0.03,0.04)*
(-1589.949037010248*pow(E,3.0)+231.4661462341716*pow(E,2.0)-12.13981879945409*E+.2457036563721451)+charfun2(E,0.02,0.03)*
(-7415.802456360414*pow(E,3.0)+755.7929539756865*pow(E,2.0)-27.86962303169954*E+.4030016986945995)+charfun2(E,0.015,0.02)*
(-31556.32586900464*pow(E,3.0)+2204.22435873434*pow(E,2.0)-56.83825112687262*E+.5961258859957532)+charfun2(E,0.01,0.015)*
(-146680.4480173523*pow(E,3.0)+7384.809855409986*pow(E,2.0)-134.5470335770073*E+.9846697982464268)+charfun2(E,0.008,0.01)*
(-669059.0740519706*pow(E,3.0)+23056.16863644854*pow(E,2.0)-291.2606213873928*E+1.507048424281046)+charfun2(E,0.006,0.008)*
(-1170308.214850733*pow(E,3.0)+35086.14801561882*pow(E,2.0)-387.5004564207551*E+1.763687984370011)+charfun2(E,0.005,0.006)*
(-2119432.414486066*pow(E,3.0)+52170.38360905486*pow(E,2.0)-490.005869981371*E+1.968698811491243)+charfun2(E,0.004,0.005)*
(-2361637.630958267*pow(E,3.0)+55803.46185613783*pow(E,2.0)-508.1712612167862*E+1.998974463550269);

}

double photon_mass_coefficient_compton(const double &E){
    if(!isininc(0.0, E, 50.0)) FUNCERR("Water-Photon-compton mass coefficient is outside of range of data (0-50 MeV) at " << E );

    return
(3400942.304257767*pow(E,3.0)-10202.8269127733*pow(E,2.0)+36.35259133670887*E-.01635070672819334)*charfun2(E,0.0,0.0015)+
(-9.662292440580217E-8*pow(E,3.0)+1.4493438660870323E-5*pow(E,2.0)-8.120096406029361E-4*E+.02135475092869625)*charfun2(E,40.0,50.0)+
(-6.688537797099053E-8*pow(E,3.0)+1.0924933088692926E-5*pow(E,2.0)-6.692694177158404E-4*E+.01945154795686832)*charfun2(E,30.0,40.0)+
(-3.6583556371023446E-7*pow(E,3.0)+3.7830449805224886E-5*pow(E,2.0)-.001476434919211798*E+0.0275232029718279)*charfun2(E,20.0,30.0)+
(-7.351526652744441E-7*pow(E,3.0)+5.998947589907746E-5*pow(E,2.0)-.001919615441088851*E+.03047773978434158)*charfun2(E,15.0,20.0)+
(-5.172110280583475E-6*pow(E,3.0)+2.596525685879839E-4*pow(E,2.0)-.004914561831422446*E+.04545247173600955)*charfun2(E,10.0,15.0)+
(-4.4694839553073007E-6*pow(E,3.0)+2.385737788296986E-4*pow(E,2.0)-.004703773933839592*E+.04474984541073337)*charfun2(E,8.0,10.0)+
(-4.816332005298413E-5*pow(E,3.0)+.001287225845173942*pow(E,2.0)-.01309299046459354*E+0.0671210894927439)*charfun2(E,6.0,8.0)+
(-3.179502755124865E-5*pow(E,3.0)+9.925965801427039E-4*pow(E,2.0)-.01132521487440611*E+.06358553831236907)*charfun2(E,5.0,6.0)+
(-1.0045269380330406E-4*pow(E,3.0)+.002022461573923534*pow(E,2.0)-.01647453984331027*E+.07216774659387598)*charfun2(E,4.0,5.0)+
(-3.6639419723553035E-4*pow(E,3.0)+0.00521375961511025*pow(E,2.0)-.02923973200805713*E+.08918800281353848)*charfun2(E,3.0,4.0)+charfun2(E,0.004,0.005)*
(643523.6975853164*pow(E,3.0)-11081.64953926434*pow(E,2.0)+78.17990030067477*E-.08229872521992992)+charfun2(E,0.006,0.008)*
(219371.8595044525*pow(E,3.0)-5974.152000901251*pow(E,2.0)+60.17109280595854*E-0.0673414064562679)+charfun2(E,0.008,0.01)*
(53599.23229884548*pow(E,3.0)-1995.608947966682*pow(E,2.0)+28.34274838248197*E+.01753417867300289)+charfun2(E,0.01,0.015)*
(17112.83128818418*pow(E,3.0)-901.016917646843*pow(E,2.0)+17.39682807928359*E+.05402057968366414)+charfun2(E,0.015,0.02)*
(5488.635159605907*pow(E,3.0)-377.9280918608209*pow(E,2.0)+9.55049569249326*E+.09325224161761603)+charfun2(E,0.04,0.05)*
(721.4806912854466*pow(E,3.0)-103.166507440502*pow(E,2.0)+4.583953452803957*E+.1185335095503764)+charfun2(E,0.02,0.03)*
(663.656132571507*pow(E,3.0)-88.42935023875697*pow(E,2.0)+3.760520860051983*E+0.131852073833891)+charfun2(E,0.03,0.04)*
(403.7157940357631*pow(E,3.0)-65.03471977054*pow(E,2.0)+3.058681946005477*E+0.138870462974356)+charfun2(E,0.06,0.08)*
(75.10739943148126*pow(E,3.0)-17.15289242067816*pow(E,2.0)+.9398154273090213*E+.1661382887987001)+charfun2(E,0.1,0.15)*
(6.074299780944327*pow(E,3.0)-1.680263182781349*pow(E,2.0)-.1884634438995185*E+.1925746764368211)+charfun2(E,0.4,0.5)*
(.06659076284316023*pow(E,3.0)+.02458463503620234*pow(E,2.0)-.1567465368669099*E+.1605032643190093)+charfun2(E,2.0,3.0)*
(-7.339705172545782E-4*pow(E,3.0)+.008521946495281681*pow(E,2.0)-.03916429264857142*E+.09911256345405277)+charfun2(E,1.5,2.0)*
(-.003427141718493013*pow(E,3.0)+.02468097370271229*pow(E,2.0)-.07148234706343262*E+.1206579330639602)+charfun2(E,1.25,1.5)*
(-.005002535240047758*pow(E,3.0)+.03177024454970864*pow(E,2.0)-.08211625333392716*E+.1259748861992075)+charfun2(E,1.0,1.25)*
(-0.00971663604381047*pow(E,3.0)+.04944812256381881*pow(E,2.0)-.1042136008515649*E+.1351821143315565)+charfun2(E,0.8,1.0)*
(-0.024327331454097*pow(E,3.0)+.09328020879467842*pow(E,2.0)-.1480456870824245*E+.1497928097418431)+charfun2(E,0.6,0.8)*
(-.03788119840563847*pow(E,3.0)+.1258094894783779*pow(E,2.0)-.1740691116293842*E+.1567323896210323)+charfun2(E,0.5,0.6)*
(-.2228248231757136*pow(E,3.0)+.4587080140645131*pow(E,2.0)-.3738082263810651*E+.1966802125713685)+charfun2(E,0.3,0.4)*
(-.4435382281969436*pow(E,3.0)+.6367394242843272*pow(E,2.0)-.4016084525661596*E+.1931515197455759)+charfun2(E,0.2,0.3)*
(-.6924378500554127*pow(E,3.0)+.8607490839569489*pow(E,2.0)-.4688113504679463*E+.1998718095357546)+charfun2(E,0.15,0.2)*
(-4.052568964799313*pow(E,3.0)+2.87682775280329*pow(E,2.0)-.8720270842372142*E+.2267528584537058)+charfun2(E,0.08,0.1)*
(-12.18094485625656*pow(E,3.0)+3.796310208378919*pow(E,2.0)-.7361207830155472*E+.2108299210740221)+charfun2(E,0.05,0.06)*
(-289.6385591775504*pow(E,3.0)+48.50138012894755*pow(E,2.0)-2.999440925668523*E+.2449234158582508)+charfun2(E,0.003,0.004)*
(-175206.6388957823*pow(E,3.0)-1256.885501491151*pow(E,2.0)+38.88084414958202*E-.02989998368513958)+charfun2(E,0.005,0.006)*
(-198888.151445504*pow(E,3.0)+1554.528196197965*pow(E,2.0)+14.99901162336323*E+.02300275590892276)+charfun2(E,0.002,0.003)*
(-542697.1420021665*pow(E,3.0)+2050.529026466302*pow(E,2.0)+28.95860056570966*E-0.0199777401012672)+charfun2(E,0.0015,0.002)*
(-4204711.521288898*pow(E,3.0)+24022.61530218669*pow(E,2.0)-14.98557198573113*E+.009318374933026674);
 
}
double photon_mass_coefficient_photoelectric(const double &E){
    if(!isininc(0.0, E, 50.0)) FUNCERR("Water-Photon-photoelectric mass coefficient is outside of range of data (0-50 MeV) at " << E );

    if( E <= water_binding_energy_oxygen_K ) return 0.0;

    return 
(3.906918119783624E12*pow(E,3.0)-1.172075435935087E10*pow(E,2.0)+5324024.829404967*E+6569.811410162281)*charfun2(E,0.0,0.0015)+
(-7.591917962605931E-13*pow(E,3.0)+1.13878769439089E-10*pow(E,2.0)-6.27801929232839E-9*E+1.4940301555127117E-7)*charfun2(E,40.0,50.0)+
(-6.040410186970354E-13*pow(E,3.0)+9.526067613146203E-11*pow(E,2.0)-5.533295560023311E-9*E+1.3947336578720346E-7)*charfun2(E,30.0,40.0)+
(-4.124644128951276E-12*pow(E,3.0)+4.121149560543437E-10*pow(E,2.0)-1.5038923957709757E-8*E+2.34529649764068E-7)*charfun2(E,20.0,30.0)+
(-1.491679152544476E-11*pow(E,3.0)+1.0596437998439526E-9*pow(E,2.0)-2.798950083350194E-8*E+3.208668289360158E-7)*charfun2(E,15.0,20.0)+
(-7.076151904586939E-11*pow(E,3.0)+3.5726565382630615E-9*pow(E,2.0)-6.568469190978856E-8*E+5.093427843174491E-7)*charfun2(E,10.0,15.0)+
(-2.850903019844734E-10*pow(E,3.0)+1.000252002642118E-8*pow(E,2.0)-1.2998332679136976E-7*E+7.236715672560529E-7)*charfun2(E,8.0,10.0)+
(-9.997375231906511E-10*pow(E,3.0)+2.715405333536945E-8*pow(E,2.0)-2.6719559326295583E-7*E+1.0895709445136159E-6)*charfun2(E,6.0,8.0)+
(-2.5226163389494083E-9*pow(E,3.0)+5.456587201902708E-8*pow(E,2.0)-4.3166650536490175E-7*E+1.4185127687175078E-6)*charfun2(E,5.0,6.0)+
(-7.069362469377553E-9*pow(E,3.0)+1.2276706397544926E-7*pow(E,2.0)-7.726724651470125E-7*E+1.9868560350210254E-6)*charfun2(E,4.0,5.0)+
(-1.8199933783540354E-8*pow(E,3.0)+2.5633391974540287E-7*pow(E,2.0)-1.306939888226827E-6*E+2.699212599127445E-6)*charfun2(E,3.0,4.0)+charfun2(E,0.002,0.003)*
(6.66154283230926E10*pow(E,3.0)-3.6920128864030466E8*pow(E,2.0)+156313.3050627641*E+1247.25511785095)+charfun2(E,0.004,0.005)*
(9.523388524766133E9*pow(E,3.0)-1.2412220866555898E8*pow(E,2.0)+496073.1779792969*E-525.8342388532761)+charfun2(E,0.15,0.2)*
(.5556258542637516*pow(E,3.0)-.2614878633292303*pow(E,2.0)+.03128536064583359*E+4.6435569892482326E-5)+charfun2(E,0.3,0.4)*
(.03698838976644835*pow(E,3.0)-.04024438402159455*pow(E,2.0)+.01401836460153029*E-.001500601342209684)+charfun2(E,0.5,0.6)*
(0.00239274701923665*pow(E,3.0)-.004021022089637869*pow(E,2.0)+.002174724511096304*E-3.6240011054326626E-4)+charfun2(E,0.8,1.0)*
(5.193621312695285E-5*pow(E,3.0)-1.349637660775414E-4*pow(E,2.0)+1.0501041890980953E-4*E-1.8302865959221007E-5)+charfun2(E,2.0,3.0)*
(-1.1313090239646091E-7*pow(E,3.0)+1.1107126372616875E-6*pow(E,2.0)-3.870076040775681E-6*E+5.2623487516763E-6)+charfun2(E,1.5,2.0)*
(-1.0369602722883084E-6*pow(E,3.0)+6.653688856612773E-6*pow(E,2.0)-1.4956028479477854E-5*E+1.2652983710811078E-5)+charfun2(E,1.25,1.5)*
(-1.0994295133686269E-6*pow(E,3.0)+6.934800441474208E-6*pow(E,2.0)-1.5377695856770002E-5*E+1.2863817399457156E-5)+charfun2(E,1.0,1.25)*
(-2.404391138263376E-5*pow(E,3.0)+9.297660745121843E-5*pow(E,2.0)-1.2292995461895032E-4*E+5.767725855036561E-5)+charfun2(E,0.6,0.8)*
(-4.937323326015918E-4*pow(E,3.0)+.001174640743670966*pow(E,2.0)-9.426731888889964E-4*E+2.610794294537939E-4)+charfun2(E,0.4,0.5)*
(-.01524528419642125*pow(E,3.0)+.02243602473384898*pow(E,2.0)-.01105379890064712*E+.001842353791413971)+charfun2(E,0.2,0.3)*
(-.2628082748693724*pow(E,3.0)+.2295726141506441*pow(E,2.0)-0.0669267348501413*E+.006593908602957473)+charfun2(E,0.1,0.15)*
(-12.59862330215794*pow(E,3.0)+5.657924257060532*pow(E,2.0)-.8566264574126309*E+0.0444420264728157)+charfun2(E,0.08,0.1)*
(-24.83237401618596*pow(E,3.0)+9.328049471268939*pow(E,2.0)-1.223638978833472*E+.05667577718684372)+charfun2(E,0.05,0.06)*
(-382.4544418961462*pow(E,3.0)+99.39034344535591*pow(E,2.0)-8.682602357734224*E+.2606610645103395)+charfun2(E,0.06,0.08)*
(-453.0044032777549*pow(E,3.0)+112.0893364940455*pow(E,2.0)-9.444541940655593*E+.2758998561687671)+charfun2(E,0.03,0.04)*
(-4805.469519266444*pow(E,3.0)+897.0190897641877*pow(E,2.0)-53.93109906220729*E+1.086363468098644)+charfun2(E,0.04,0.05)*
(-9278.019009709344*pow(E,3.0)+1433.725028617336*pow(E,2.0)-75.39933661633322*E+1.372606635486989)+charfun2(E,0.02,0.03)*
(-220700.1029132251*pow(E,3.0)+20327.53609522047*pow(E,2.0)-636.8466092258957*E+6.915518569735527)+charfun2(E,0.015,0.02)*
(-1647482.459396722*pow(E,3.0)+105934.4774842303*pow(E,2.0)-2348.985437006093*E+18.32977742160351)+charfun2(E,0.01,0.015)*
(-1.0880375734845615E7*pow(E,3.0)+521414.6748794306*pow(E,2.0)-8581.188397934096*E+49.49079222624351)+charfun2(E,0.006,0.008)*
(-1.0126463025005647E8*pow(E,3.0)+3649832.889134475*pow(E,2.0)-43200.4951708743*E+173.7821471504169)+charfun2(E,0.008,0.01)*
(-1.707463933831764E8*pow(E,3.0)+5317395.204329354*pow(E,2.0)-56540.99369243332*E+209.3568098745743)+charfun2(E,0.005,0.006)*
(-5.633849887099844E9*pow(E,3.0)+1.0323636751243066E8*pow(E,2.0)-640719.7029106513*E+1368.820562629971)+charfun2(E,0.003,0.004)*
(-8.005970421196468E10*pow(E,3.0)+9.508749041752109E8*pow(E,2.0)-3803915.273383782*E+5207.483696297496)+charfun2(E,0.0015,0.002)*
(-3.886590598918124E12*pow(E,3.0)+2.335003487480699E10*pow(E,2.0)-4.7282159021831827E7*E+32872.90333578068);

}

double photon_mass_coefficient_pair_triplet(const double &E){
    if(!isininc(0.0, E, 50.0)) FUNCERR("Water-Photon-Pair production mass coefficient is outside of range of data (0-50 MeV) at " << E );

    if( E < 1.2 ) return 0.0;

    return 
(-3.179998266633572E-14*pow(E,3.0)+9.539994799900716E-17*pow(E,2.0)-8.744995233242324E-20*E+2.384998699975179E-23)*charfun2(E,0.0,0.0015)+
(5.32389918209788E-8*pow(E,3.0)-7.985848773146819E-6*pow(E,2.0)+4.839685394752431E-4*E+9.113209814825413E-4)*charfun2(E,40.0,50.0)+
(2.3805040895106355E-8*pow(E,3.0)-4.4537746620421265E-6*pow(E,2.0)+3.4268557503105523E-4*E+0.00279509384073838)*charfun2(E,30.0,40.0)+
(1.0154084459859605E-7*pow(E,3.0)-1.14499969953562E-5*pow(E,2.0)+5.525722450304775E-4*E+6.9622714074416E-4)*charfun2(E,20.0,30.0)+
(1.1163558673011502E-7*pow(E,3.0)-1.2055681523247334E-5*pow(E,2.0)+5.646859355883003E-4*E+6.154692036920116E-4)*charfun2(E,15.0,20.0)+
(7.388035385732566E-7*pow(E,3.0)-4.0278239356188716E-5*pow(E,2.0)+9.88024303082421E-4*E-.001501222633778596)*charfun2(E,10.0,15.0)+
(-8.221098215144108E-8*pow(E,3.0)-1.564780373444778E-5*pow(E,2.0)+7.417199468650114E-4*E-6.802081130538977E-4)*charfun2(E,8.0,10.0)+
(3.546921711766253E-6*pow(E,3.0)-1.0274698838847245E-4*pow(E,2.0)+.001438513424097209*E-.002538324052339756)*charfun2(E,6.0,8.0)+
(-7.519505882974827E-6*pow(E,3.0)+9.6448708316867E-5*pow(E,2.0)+2.4333924386517194E-4*E-1.4797569187568332E-4)*charfun2(E,5.0,6.0)+
(9.79273426151472E-6*pow(E,3.0)-1.6323489385047618E-4*pow(E,2.0)+.001541757254701888*E-.002312005709936876)*charfun2(E,4.0,5.0)+
(-1.1651431163084654E-5*pow(E,3.0)+9.409509124471629E-5*pow(E,2.0)+5.12437314321118E-4*E-9.395791227625158E-4)*charfun2(E,3.0,4.0)+charfun2(E,1.0,1.25)*
(7.642126935979907E-4*pow(E,3.0)-.002228440925116606*pow(E,2.0)+.002171631187170024*E-7.074029556514084E-4)+charfun2(E,0.8,1.0)*
(1.3630033511723244E-4*pow(E,3.0)-3.44703849674331E-4*pow(E,2.0)+2.878941117277486E-4*E-7.949059717065007E-5)+charfun2(E,0.5,0.6)*
(2.59303015857861E-5*pow(E,3.0)-4.0539516959888977E-5*pow(E,2.0)+2.0996894212812522E-5*E-3.60485556465728E-6)+charfun2(E,0.3,0.4)*
(1.873658567855629E-6*pow(E,3.0)-1.8071578511134517E-6*pow(E,2.0)+5.717568256728337E-7*E-5.947162243374141E-8)+charfun2(E,0.15,0.2)*
(3.591108595660876E-7*pow(E,3.0)-1.732383858794119E-7*pow(E,2.0)+2.741568054793106E-8*E-1.4264875509384362E-9)+charfun2(E,0.08,0.1)*
(9.184473034852474E-8*pow(E,3.0)-2.3227552666108348E-8*pow(E,2.0)+1.9399480593954985E-9*E-5.356400962699115E-11)+charfun2(E,0.05,0.06)*
(1.7472895829302681E-8*pow(E,3.0)-2.731718157873926E-9*pow(E,2.0)+1.414856453194774E-10*E-2.429098849951893E-12)+charfun2(E,0.03,0.04)*
(1.262547636305384E-9*pow(E,3.0)-1.217736738431091E-10*pow(E,2.0)+3.852730914687716E-12*E-4.007440716207866E-14)+charfun2(E,0.015,0.02)*
(2.41983558098615E-10*pow(E,3.0)-1.167350969695571E-11*pow(E,2.0)+1.847380481522311E-13*E-9.612255490512563E-16)+charfun2(E,0.008,0.01)*
(6.188872876543923E-11*pow(E,3.0)-1.565167321852211E-12*pow(E,2.0)+1.307216197457262E-14*E-3.609361632594436E-17)+charfun2(E,0.005,0.006)*
(1.17739435822108E-11*pow(E,3.0)-1.840741996640843E-13*pow(E,2.0)+9.533873303237445E-16*E-1.636824607792965E-18)+charfun2(E,0.003,0.004)*
(8.506495363244803E-13*pow(E,3.0)-8.204395527914613E-15*pow(E,2.0)+2.595673585139652E-17*E-2.699818528371902E-20)+charfun2(E,0.0015,0.002)*
(1.589999133316786E-13*pow(E,3.0)-7.631995839920573E-16*pow(E,2.0)+1.200449345654173E-18*E-6.200996619935465E-22)+charfun2(E,0.002,0.003)*
(-2.464498656641018E-13*pow(E,3.0)+1.669499089982625E-15*pow(E,2.0)-3.664948002295192E-18*E+2.623498569972696E-21)+charfun2(E,0.004,0.005)*
(-3.156148279633819E-12*pow(E,3.0)+3.987717826358498E-14*pow(E,2.0)-1.663695593146018E-16*E+2.294368749376121E-19)+charfun2(E,0.006,0.008)*
(-1.794910271622986E-11*pow(E,3.0)+3.509406337078477E-13*pow(E,2.0)-2.256701669907847E-15*E+4.783353392670218E-18)+charfun2(E,0.01,0.015)*
(-7.171627490860032E-11*pow(E,3.0)+2.442982788368976E-12*pow(E,2.0)-2.700933912763924E-14*E+9.751138734809519E-17)+charfun2(E,0.02,0.03)*
(-3.663296788195243E-10*pow(E,3.0)+2.482528451813265E-11*pow(E,2.0)-5.452378361495361E-13*E+3.905280346293858E-15)+charfun2(E,0.04,0.05)*
(-4.683860866402012E-9*pow(E,3.0)+5.917953464817785E-10*pow(E,2.0)-2.469002989830778E-11*E+3.404957370111947E-13)+charfun2(E,0.06,0.08)*
(-2.6637007897716086E-8*pow(E,3.0)+5.208064512989451E-9*pow(E,2.0)-3.349013149323252E-10*E+7.098640355084159E-12)+charfun2(E,0.1,0.15)*
(-1.0642910342081018E-7*pow(E,3.0)+3.625459746469214E-8*pow(E,2.0)-4.0082669536845505E-9*E+1.447098241423438E-10)+charfun2(E,0.2,0.3)*
(-5.436442330120889E-7*pow(E,3.0)+3.6841466966749414E-7*pow(E,2.0)-8.091493056145016E-8*E+5.795553189686978E-9)+charfun2(E,0.4,0.5)*
(-6.950990038410432E-6*pow(E,3.0)+8.782420476405821E-6*pow(E,2.0)-3.6640745053348756E-6*E+5.053058883672866E-7)+charfun2(E,2.0,3.0)*
(-3.418700960917598E-5*pow(E,3.0)+2.9691529725953825E-4*pow(E,2.0)-9.602330372334767E-5*E-3.3111850471804993E-4)+charfun2(E,0.6,0.8)*
(-3.953011881249848E-5*pow(E,3.0)+7.728923975702324E-5*pow(E,2.0)-4.970035981733481E-5*E+1.0534595241372187E-5)+charfun2(E,1.5,2.0)*
(-1.9958860080980909E-4*pow(E,3.0)+.001289324844463337*pow(E,2.0)-.002080842398130946*E+9.920942248870156E-4)+charfun2(E,1.25,1.5)*
(-3.282407134088845E-4*pow(E,3.0)+.001868259351159177*pow(E,2.0)-.002949244158174704*E+.001426295104908895);

}


double photon_mass_coefficient_transfer( const double &E ){
    return (3.86423683449589E12*pow(E,3.0)-1.159271050348767E10*pow(E,2.0)+5240651.294863697*E+6552.822374128082)*charfun2(E,0.0,0.0015)
+(-1.1065316096002413E-8*pow(E,3.0)+1.659797414400362E-6*pow(E,2.0)-5.488333911041784E-5*E+.01534783793152028)*charfun2(E,40.0,50.0)
+(-1.4673419519986847E-8*pow(E,3.0)+2.0927698252784932E-6*pow(E,2.0)-7.220223554554308E-5*E+0.0155787565506553)*charfun2(E,30.0,40.0)
+(-1.1024100582405157E-7*pow(E,3.0)+1.0693852592644322E-5*pow(E,2.0)-3.302347185665179E-4*E+.01815908138086505)*charfun2(E,20.0,30.0)
+(-4.333286773754762E-7*pow(E,3.0)+3.0079112885729803E-5*pow(E,2.0)-7.179399244282274E-4*E+.02074378275327644)*charfun2(E,15.0,20.0)
+(-1.4015997158421273E-6*pow(E,3.0)+7.365130961672908E-5*pow(E,2.0)-.001371522875393217*E+.02401169750810139)*charfun2(E,10.0,15.0)
+(-5.70419147644887E-6*pow(E,3.0)+2.0272906243493133E-4*pow(E,2.0)-0.00266230040357524*E+.02831428926870813)*charfun2(E,8.0,10.0)
+(-8.625724476290617E-6*pow(E,3.0)+2.728458544311333E-4*pow(E,2.0)-.003223234739544854*E+0.0298101141646271)*charfun2(E,6.0,8.0)
+(-3.175445633145904E-5*pow(E,3.0)+6.891630278241648E-4*pow(E,2.0)-.005721137779903043*E+.03480592024534347)*charfun2(E,5.0,6.0)
+(-2.6062090626897144E-5*pow(E,3.0)+6.037775422557364E-4*pow(E,2.0)-.005294210352060902*E+.03409437453227324)*charfun2(E,4.0,5.0)
+(-8.399718116095379E-5*pow(E,3.0)+.001298998628664417*pow(E,2.0)-.008075094697695621*E+.03780222032645286)*charfun2(E,3.0,4.0)
+charfun2(E,0.002,0.003)*(5.873546734314737E10*pow(E,3.0)-3.0343381103422434E8*pow(E,2.0)-22304.82434867835*E+1403.661154089075)
+charfun2(E,0.004,0.005)*(8.955823717078915E9*pow(E,3.0)-1.1603045784601476E8*pow(E,2.0)+457938.8738723189*E-466.5208878460903)
+charfun2(E,0.15,0.2)*(1.518768864220469*pow(E,3.0)-1.01423298739355*pow(E,2.0)+.2552954256473489*E+.007050083452508446)
+charfun2(E,0.3,0.4)*(.1480971323546915*pow(E,3.0)-.2049789132882501*pow(E,2.0)+.09738930033053919*E+.01718268952320408)
+charfun2(E,0.2,0.3)*(.1042672489741335*pow(E,3.0)-.1655320182457478*pow(E,2.0)+0.0855552318177886*E+.01836609637447913)
+charfun2(E,0.4,0.5)*(.03334422160708897*pow(E,3.0)-.06727542039112701*pow(E,2.0)+.04230790317168998*E+.02452687581105065)
+charfun2(E,0.5,0.6)*(.02852598121697046*pow(E,3.0)-.06004805980594923*pow(E,2.0)+.03869422287910107*E+.02512915585981546)
+charfun2(E,0.6,0.8)*(.01114119741975932*pow(E,3.0)-.02875544897096919*pow(E,2.0)+.01991865637811308*E+.02888426916001305)
+charfun2(E,1.0,1.25)*(.002829768654302456*pow(E,3.0)-0.00972171169331805*pow(E,2.0)+0.0056053583154375*E+.03239658472357811)
+charfun2(E,0.8,1.0)*(.001306949055226886*pow(E,3.0)-.005153252896091337*pow(E,2.0)+.001036899518210788*E+.03391940432265367)
+charfun2(E,1.25,1.5)*(1.9040257177320485E-4*pow(E,3.0)+1.759111161666431E-4*pow(E,2.0)-0.00676667019641837*E+.03755159660351803)
+charfun2(E,1.5,2.0)*(-9.05674244949038E-5*pow(E,3.0)+.001440276099373132*pow(E,2.0)-.008663217671228102*E+.03849987034092291)
+charfun2(E,2.0,3.0)*(-1.1794918472929239E-4*pow(E,3.0)+.001604566660779464*pow(E,2.0)-.008991798794040766*E+.03871892442279802)
+charfun2(E,0.1,0.15)*(-10.59271107555304*pow(E,3.0)+4.435932985504532*pow(E,2.0)-.5622294702873634*E+.04792632824924405)
+charfun2(E,0.08,0.1)*(-18.7835032254484*pow(E,3.0)+6.893170630473139*pow(E,2.0)-0.807953234784224*E+.05611712039913942)
+charfun2(E,0.05,0.06)*(-250.6737968458064*pow(E,3.0)+74.97264434394441*pow(E,2.0)-6.999859326537049*E+.2361455800727172)
+charfun2(E,0.06,0.08)*(-457.770517588896*pow(E,3.0)+112.2500540777006*pow(E,2.0)-9.23650391056242*E+.2808784717532247)
+charfun2(E,0.03,0.04)*(-3043.890869429773*pow(E,3.0)+693.2292441515793*pow(E,2.0)-45.8836508737204*E+.9904882599497942)
+charfun2(E,0.04,0.05)*(-9686.3588334311*pow(E,3.0)+1490.325399831739*pow(E,2.0)-77.76749710092678*E+1.415606209645879)
+charfun2(E,0.02,0.03)*(-227788.07768885*pow(E,3.0)+20920.2060578994*pow(E,2.0)-652.6929552861549*E+7.058581304074139)
+charfun2(E,0.015,0.02)*(-1568199.47281436*pow(E,3.0)+101344.88976543*pow(E,2.0)-2261.186629436768*E+17.78187246507823)
+charfun2(E,0.01,0.015)*(-1.1237834077300853E7*pow(E,3.0)+536478.4469673221*pow(E,2.0)-8788.189987465152*E+50.41688925522012)
+charfun2(E,0.006,0.008)*(-1.2447922610864762E8*pow(E,3.0)+4173607.670347505*pow(E,2.0)-47078.58192078523*E+183.1691282316691)
+charfun2(E,0.008,0.01)*(-1.6446046984861112E8*pow(E,3.0)+5133157.52010663*pow(E,2.0)-54754.98071885823*E+203.6395250265304)
+charfun2(E,0.005,0.006)*(-5.457972103259043E9*pow(E,3.0)+1.0017647945905465E8*pow(E,2.0)-623095.8126530279*E+1335.203589696154)
+charfun2(E,0.003,0.004)*(-7.791532276505659E10*pow(E,3.0)+9.264232999396114E8*pow(E,2.0)-3711876.157270186*E+5093.232487010583)
+charfun2(E,0.0015,0.002)*(-3.83158417247945E12*pow(E,3.0)+2.303848402790136E10*pow(E,2.0)-4.670614050221985E7*E+32526.21827266986);
}

double photon_mass_coefficient_absorption( const double &E ){
   return (3.864236180501223E12*pow(E,3.0)-1.159270854150367E10*pow(E,2.0)+5240649.496378362*E+6552.822864624082)*charfun2(E,0.0,0.0015)
+(-1.8743226389869325E-8*pow(E,3.0)+2.8114839584803986E-6*pow(E,2.0)-1.576998752850331E-4*E+.01598918716678432)*charfun2(E,40.0,50.0)
+(-6.283868050652811E-9*pow(E,3.0)+1.3163609577744168E-6*pow(E,2.0)-9.789495525679365E-5*E+.01519178823307447)*charfun2(E,30.0,40.0)
+(-1.161213014075199E-7*pow(E,3.0)+1.1201729959892459E-5*pow(E,2.0)-3.94456025320335E-4*E+.01815739893370988)*charfun2(E,20.0,30.0)
+(-4.438140803653114E-7*pow(E,3.0)+3.086329669735994E-5*pow(E,2.0)-7.876873600696845E-4*E+0.0207789411653722)*charfun2(E,15.0,20.0)
+(-1.367148847996962E-6*pow(E,3.0)+7.241336124078424E-5*pow(E,2.0)-.001410938328221049*E+.02389519600612903)*charfun2(E,10.0,15.0)
+(-6.096612648449169E-6*pow(E,3.0)+2.1429727525435038E-4*pow(E,2.0)-.002829777468356711*E+.02862465980658123)*charfun2(E,8.0,10.0)
+(-8.118040956878539E-6*pow(E,3.0)+2.6281155465665534E-4*pow(E,2.0)-0.00321789170357515*E+.02965963110049707)*charfun2(E,6.0,8.0)
+(-3.2411711528990683E-5*pow(E,3.0)+7.00097624954674E-4*pow(E,2.0)-0.00584160812536326*E+.03490706394407331)*charfun2(E,5.0,6.0)
+(-2.4567807489363566E-5*pow(E,3.0)+5.824390643602672E-4*pow(E,2.0)-.005253315322391226*E+.03392657593911991)*charfun2(E,4.0,5.0)
+(-8.931705851355307E-5*pow(E,3.0)+.001359430076650541*pow(E,2.0)-.008361279371552323*E+.03807052800466804)*charfun2(E,3.0,4.0)
+charfun2(E,0.002,0.003)*(5.873039888448066E10*pow(E,3.0)-3.03399476314224E8*pow(E,2.0)-22380.19723401236*E+1403.715108649076)
+charfun2(E,0.004,0.005)*(8.950914746411953E9*pow(E,3.0)-1.1596034853401098E8*pow(E,2.0)+457607.3372749698*E-466.0123163260685)
+charfun2(E,0.15,0.2)*(1.556782503812942*pow(E,3.0)-1.03554391853593*pow(E,2.0)+.2590379898848781*E+.006829898733958034)
+charfun2(E,0.3,0.4)*(.1429289765847532*pow(E,3.0)-0.19971693427173*pow(E,2.0)+0.0956181326538523*E+.01735000192051167)
+charfun2(E,0.2,0.3)*(.1013118696757077*pow(E,3.0)-.1622615380535889*pow(E,2.0)+.08438151378841005*E+0.0184736638070559)
+charfun2(E,0.4,0.5)*(.03697222398527229*pow(E,3.0)-.07256883115235288*pow(E,2.0)+.04475889140610145*E+.02413123408687845)
+charfun2(E,0.5,0.6)*(.02918212747416465*pow(E,3.0)-.06088368638569141*pow(E,2.0)+.03891631902277076*E+.02510499615076689)
+charfun2(E,0.6,0.8)*(.009964458860002993*pow(E,3.0)-.02629188288020043*pow(E,2.0)+.01816123691947616*E+.02925601257142582)
+charfun2(E,0.8,1.0)*(.002486275021935792*pow(E,3.0)-.008344241668839146*pow(E,2.0)+.003803123950387122*E+.03308484269651624)
+charfun2(E,1.0,1.25)*(.002046215555867676*pow(E,3.0)-.007024063270634796*pow(E,2.0)+.002482945552182786*E+.03352490216258432)
+charfun2(E,1.25,1.5)*(6.922550449158382E-4*pow(E,3.0)-.001946711354565405*pow(E,2.0)-.003863744342903958*E+.03616935628553716)
+charfun2(E,2.0,3.0)*(-9.816395845642538E-5*pow(E,3.0)+.001439052176136392*pow(E,2.0)-.008600145670009874*E+0.0383093943031256)
+charfun2(E,1.5,2.0)*(-2.1224528143868454E-4*pow(E,3.0)+.002123540114029947*pow(E,2.0)-.009969121545796988*E+.03922204488698365)
+charfun2(E,0.1,0.15)*(-10.64288916899125*pow(E,3.0)+4.454308334225956*pow(E,2.0)-.5644398480294046*E+.04800379062967214)
+charfun2(E,0.08,0.1)*(-18.51578018869366*pow(E,3.0)+6.816175640136682*pow(E,2.0)-.8006265786204769*E+.05587668164937458)
+charfun2(E,0.05,0.06)*(-230.406311693527*pow(E,3.0)+71.37214094190543*pow(E,2.0)-6.787238067198505*E+.2319623399668524)
+charfun2(E,0.06,0.08)*(-458.7769407036729*pow(E,3.0)+112.4788541637317*pow(E,2.0)-9.253640860508078*E+0.281290395833044)
+charfun2(E,0.03,0.04)*(-2736.923791833449*pow(E,3.0)+658.587073431438*pow(E,2.0)-44.59747711041689*E+.9747928896037157)
+charfun2(E,0.04,0.05)*(-9778.167474118247*pow(E,3.0)+1503.536315305613*pow(E,2.0)-78.39544678538391*E+1.425432485269943)
+charfun2(E,0.02,0.03)*(-228654.1373585481*pow(E,3.0)+20991.13629443576*pow(E,2.0)-654.5739537405465*E+7.074557655905011)
+charfun2(E,0.015,0.02)*(-1562683.717680469*pow(E,3.0)+101032.911113751*pow(E,2.0)-2255.409450126851*E+17.74679429848038)
+charfun2(E,0.01,0.015)*(-1.1248226190428515E7*pow(E,3.0)+536882.3223874131*pow(E,2.0)-8793.150619231783*E+50.43550014400503)
+charfun2(E,0.006,0.008)*(-1.2524334077693158E8*pow(E,3.0)+4190261.062379128*pow(E,2.0)-47195.14043832193*E+183.4240059921002)
+charfun2(E,0.008,0.01)*(-1.641642245097022E8*pow(E,3.0)+5124362.271965624*pow(E,2.0)-54667.9501150139*E+203.3514984632787)
+charfun2(E,0.005,0.006)*(-5.455830577924644E9*pow(E,3.0)+1.0014083133103799E8*pow(E,2.0)-622898.5620502748*E+1334.830849216006)
+charfun2(E,0.003,0.004)*(-7.790782840772316E10*pow(E,3.0)+9.263445693156104E8*pow(E,2.0)-3711612.334123516*E+5092.947245538578)
+charfun2(E,0.0015,0.002)*(-3.831580902506116E12*pow(E,3.0)+2.303846833202935E10*pow(E,2.0)-4.670611581392118E7*E+32526.20551977385); 
}


double photon_one_minus_g( const double &E ){
    return (-246210.9694748019*pow(E,3.0)+738.6329084244059*pow(E,2.0)-.6770801660557026*E+1.000184658227106)*charfun2(E,0.0,0.0015)
+(-5.200505800773514E-7*pow(E,3.0)+7.800758701160271E-5*pow(E,2.0)-.006618374292572393*E+1.033206069609282)*charfun2(E,40.0,50.0)
+(-9.974709961328091E-8*pow(E,3.0)+2.757116935591424E-5*pow(E,2.0)-.004600917586344858*E+1.006306646859582)*charfun2(E,30.0,40.0)
+(-8.096102146952381E-8*pow(E,3.0)+2.588042232297612E-5*pow(E,2.0)-.004550195175356708*E+1.0057994227497)*charfun2(E,20.0,30.0)
+(-9.101874649955998E-7*pow(E,3.0)+7.563400893454066E-5*pow(E,2.0)-.005545266907588026*E+1.012433234297909)*charfun2(E,15.0,20.0)
+(1.7600417389002224E-6*pow(E,3.0)-4.4526305240771324E-5*pow(E,2.0)-.003742862194958313*E+1.00342121073476)*charfun2(E,10.0,15.0)
+(-7.018582010958269E-6*pow(E,3.0)+2.1883240725498335E-4*pow(E,2.0)-.006376449319915878*E+1.012199834484619)*charfun2(E,8.0,10.0)
+(3.0867856981028063E-5*pow(E,3.0)-6.904421285526886E-4*pow(E,2.0)+8.977469665454874E-4*E+.9928019777207218)*charfun2(E,6.0,8.0)
+(-8.099068075845999E-5*pow(E,3.0)+.001323011550758096*pow(E,2.0)-0.0111829751093192*E+1.01696342187245)*charfun2(E,5.0,6.0)
+(1.3531199800393312E-4*pow(E,3.0)-0.0019215286306778*pow(E,2.0)+.005039725797860273*E+.9899255870271517)*charfun2(E,4.0,5.0)
+(-6.025731125731664E-5*pow(E,3.0)+4.253030804571968E-4*pow(E,2.0)-0.00434760104667975*E+1.002442022819872)*charfun2(E,3.0,4.0)
+charfun2(E,0.0015,0.002)*(431054.847374098*pow(E,3.0)-2309.063267395644*pow(E,2.0)+3.894464097674245*E+.9978988860952414)
+charfun2(E,0.004,0.005)*(63561.2796232039*pow(E,3.0)-851.4442785642032*pow(E,2.0)+3.685760450062503*E+.9947121447608924)
+charfun2(E,0.006,0.008)*(4295.917051144158*pow(E,3.0)-96.517246970293*pow(E,2.0)+.7154457340147928*E+.9980540284037951)
+charfun2(E,0.01,0.015)*(835.311281147789*pow(E,3.0)-32.20764741340268*pow(E,2.0)+.3884183267898607*E+.9983012701922942)
+charfun2(E,0.02,0.03)*(127.261592565696*pow(E,3.0)-10.01282752796538*pow(E,2.0)+.2488443505234557*E+.9977101512601916)
+charfun2(E,0.04,0.05)*(16.26467952938687*pow(E,3.0)-2.3374927812922*pow(E,2.0)+0.111159805187043*E+0.997852656752706)
+charfun2(E,0.06,0.08)*(.6886140788716251*pow(E,3.0)-.1470558888944459*pow(E,2.0)+.01039633607792467*E+.9993568803943083)
+charfun2(E,0.1,0.15)*(.4115313644234906*pow(E,3.0)-.1732000147684704*pow(E,2.0)+.02175226388200358*E+.9987452423950609)
+charfun2(E,0.3,0.4)*(.08317222598453072*pow(E,3.0)-0.0862021786557265*pow(E,2.0)+.02656780144473458*E+.9967422055440127)
+charfun2(E,0.5,0.6)*(.07249827213413144*pow(E,3.0)-.1218182030343931*pow(E,2.0)+.06502659569577318*E+.9875789688939456)
+charfun2(E,0.8,1.0)*(.01054104702590709*pow(E,3.0)-0.0297991758666944*pow(E,2.0)+.02541836181683621*E+.9913397670239514)
+charfun2(E,1.25,1.5)*(.002939675425886817*pow(E,3.0)-.01278952720316386*pow(E,2.0)+.01565179582396903*E+.9915773379087964)
+charfun2(E,2.0,3.0)*(1.0571724702544441E-4*pow(E,3.0)-.001068467944087652*pow(E,2.0)+1.3371202695489082E-4*E+.9979607097462373)
+charfun2(E,1.5,2.0)*(-5.821177835078717E-4*pow(E,3.0)+.003058542239112244*pow(E,2.0)-.008120308339444993*E+1.003463389990504)
+charfun2(E,1.0,1.25)*(-.004786279422820217*pow(E,3.0)+.01618280347948753*pow(E,2.0)-.02056361752934466*E+1.006667093472678)
+charfun2(E,0.6,0.8)*(-.02196558301926807*pow(E,3.0)+.04821673624172598*pow(E,2.0)-.03699436786989985*E+1.00798316160708)
+charfun2(E,0.2,0.3)*(-.04377127940845756*pow(E,3.0)+.02804697619796295*pow(E,2.0)-0.0077069450113747*E+1.000169680189624)
+charfun2(E,0.15,0.2)*(-.06803260446141327*pow(E,3.0)+.04260377122973637*pow(E,2.0)-.01061830401772923*E+1.000363770790048)
+charfun2(E,0.4,0.5)*(-0.0889176245296878*pow(E,3.0)+.1203056419613357*pow(E,2.0)-.05603532680209256*E+1.007755955976923)
+charfun2(E,0.08,0.1)*(-1.132534924602788*pow(E,3.0)+.2900198719394134*pow(E,2.0)-.02456972478878328*E+1.000289308684088)
+charfun2(E,0.05,0.06)*(-4.177150093779514*pow(E,3.0)+.7287816621827592*pow(E,2.0)-.04215391698670601*E+1.000407885455601)
+charfun2(E,0.03,0.04)*(-60.88156802376798*pow(E,3.0)+6.920056925086383*pow(E,2.0)-.2591421830681071*E+1.002790016596107)
+charfun2(E,0.015,0.02)*(-517.2328141514295*pow(E,3.0)+28.65683687506215*pow(E,2.0)-.5245489375371051*E+1.002866106513929)
+charfun2(E,0.008,0.01)*(-2288.845206022633*pow(E,3.0)+61.51704720170999*pow(E,2.0)-.5488286193612453*E+1.001425426679464)
+charfun2(E,0.003,0.004)*(-13856.5665483198*pow(E,3.0)+77.56987549408134*pow(E,2.0)-.03029616617072861*E+.9996668869158705)
+charfun2(E,0.005,0.006)*(-40388.55194451784*pow(E,3.0)+707.803194951623*pow(E,2.0)-4.110476917516735*E+1.007705873706858)
+charfun2(E,0.002,0.003)*(-108135.0134299137*pow(E,3.0)+926.0758974284263*pow(E,2.0)-2.575814231973823*E+1.002212404981673);
}

#ifdef __GNUG__
    __attribute__((constructor)) static void init_on_dynamic_load(void){
        //Do something automatic here.
        if(VERBOSE) FUNCINFO("Loaded lib_water_csplines.so");
        return;
    }

    __attribute__((destructor)) static void cleanup_on_dynamic_unload(void){
        //Cleanup memory (if needed) automatically here.
        if(VERBOSE) FUNCINFO("Closed lib_water_csplines.so");
        return;
    }
#else
    #warning Being compiled with non-gcc compiler. Unable to use gcc-specific function declarations like 'attribute.' Proceed at your own risk!
#endif 

void toggle_verbosity(bool in){
    VERBOSE = in;
    return;
}



double mean_free_path( base_particle *in, const double &clamped ){
    const double E = in->get_energy();

    //Check if we are dealing with photons.
    if(in->get_type() == Particletype::Photon){ 
        //Determine the total interaction cross-section at this energy. (Probably should not trust tabulated data here, particularly if it
        // has been interpolated!)
        const double s_coherent       = photon_mass_coefficient_coherent(E);
        const double s_compton        = photon_mass_coefficient_compton(E);
        const double s_photoelectric  = photon_mass_coefficient_photoelectric(E);
        const double s_pair_triplet   = photon_mass_coefficient_pair_triplet(E);
        const double s_tot            = s_coherent + s_compton + s_photoelectric + s_pair_triplet;
        const double mu_tot           = s_tot*water_mass_density;

        return -log(clamped)/mu_tot;
    }else if(in->get_type() == Particletype::Electron){
        if(USE_CSDA == true){
            //ASSUMING S is constant! Normally I would need to integrate this!!!  FIXME!!
            return (E-electron_mass)/electron_stopping_power(E);
        }else{
            //We consider electrons to move zero distance before interacting.
            return 0.0;
        }

    }else if(in->get_type() == Particletype::Positron){
        if(USE_CSDA == true){
            //ASSUMING S is constant! Normally I would need to integrate this!!!  FIXME!!
            return (E-positron_mass)/positron_stopping_power(E);
        }else{
            //We consider positrons to move zero distance before interacting.
            return 0.0;
        }
    }

    FUNCERR("Mean-free-path for unaccounted-for particle requested");
    return 0.0;
}


double photon_mass_coefficient_total( const double &E ){
    const double s_coherent       = photon_mass_coefficient_coherent(E);
    const double s_compton        = photon_mass_coefficient_compton(E);
    const double s_photoelectric  = photon_mass_coefficient_photoelectric(E);
    const double s_pair_triplet   = photon_mass_coefficient_pair_triplet(E);
    const double s_tot            = s_coherent + s_compton + s_photoelectric + s_pair_triplet;
    const double mu_tot           = s_tot*water_mass_density;
    return mu_tot;
}



unsigned char which_interaction( base_particle *in, const double &clamped ){
    const double E = in->get_energy();

    //Check if we are dealing with photons.
    if(in->get_type() == Particletype::Photon){
        //Determine the total interaction cross-section at this energy. (Probably should not trust tabulated data here, particularly if it
        // has been interpolated!)
        const double s_coherent       = photon_mass_coefficient_coherent(E);
        const double s_compton        = photon_mass_coefficient_compton(E);
        const double s_photoelectric  = photon_mass_coefficient_photoelectric(E);
        const double s_pair_triplet   = photon_mass_coefficient_pair_triplet(E);
        const double s_tot            = s_coherent + s_compton + s_photoelectric + s_pair_triplet;
    
        if( isininc(0.0, clamped*s_tot, s_coherent) ){
            return Interactiontype::Coherent;
        }else if( isininc(s_coherent, clamped*s_tot, s_coherent+s_compton) ){
            return Interactiontype::Compton;
        }else if( isininc(s_coherent+s_compton, clamped*s_tot, s_coherent+s_compton+s_photoelectric) ){
            return Interactiontype::Photoelectric;
        }else{ //}else if( isininc(s_coherent+s_compton+s_photoelectric, clamped*s_tot, s_coherent+s_compton+s_photoelectric+s_pair_triplet) ){
            return Interactiontype::Pair;
        }

    }else if(in->get_type() == Particletype::Electron){
        if(USE_CSDA == true){
            return Interactiontype::SlowDown;
        }else{
            //We consider electrons to *always* interact with a total dump of energy (locally.)
            return Interactiontype::LocalDump;
        }

    }else if(in->get_type() == Particletype::Positron){
        if(USE_CSDA == true){
            return Interactiontype::SlowDown;
        }else{
            //We consider positrons to *always* interact with a total dump of energy (locally.)
            return Interactiontype::LocalDump;
        }
    }

    FUNCERR("Interaction choice for unaccounted-for particle requested");
    return 0.0;
}


//This is used for slow media to avoid having to compute the mass attenuation coefficients twice.
void mean_free_path_and_which_interaction( base_particle *in, const double &clamped1, const double &clamped2, unsigned char &which, double &mfp){
    const double E = in->get_energy();

    //Check if we are dealing with photons.
    if(in->get_type() == Particletype::Photon){
        //Determine the total interaction cross-section at this energy. (Probably should not trust tabulated data here, particularly if it
        // has been interpolated!)

        const double s_coherent       = photon_mass_coefficient_coherent(E);
        const double s_compton        = photon_mass_coefficient_compton(E);
        const double s_photoelectric  = photon_mass_coefficient_photoelectric(E);
        const double s_pair_triplet   = photon_mass_coefficient_pair_triplet(E);
        const double s_tot            = s_coherent + s_compton + s_photoelectric + s_pair_triplet;
        const double mu_tot           = s_tot*water_mass_density;

        mfp = -log(clamped2)/mu_tot;

        if( isininc(0.0, clamped1*s_tot, s_coherent) ){
            which = Interactiontype::Coherent;
        }else if( isininc(s_coherent, clamped1*s_tot, s_coherent+s_compton) ){
            which = Interactiontype::Compton;
        }else if( isininc(s_coherent+s_compton, clamped1*s_tot, s_coherent+s_compton+s_photoelectric) ){
            which = Interactiontype::Photoelectric;
        }else{ //}else if( isininc(s_coherent+s_compton+s_photoelectric, clamped1*s_tot, s_coherent+s_compton+s_photoelectric+s_pair_triplet) ){
            which = Interactiontype::Pair;
        }

        return;

    }else if(in->get_type() == Particletype::Electron){
        if(USE_CSDA == true){
            //ASSUMING S is constant! Normally I would need to integrate this!!!  FIXME!!
            mfp = (E-electron_mass)/electron_stopping_power(E);
            which = Interactiontype::SlowDown;
        }else{
            //We consider electrons to *always* interact with a total dump of energy (locally.)
            mfp = 0.0;
            which = Interactiontype::LocalDump;
        }

        return;
    }else if(in->get_type() == Particletype::Positron){
        if(USE_CSDA == true){
            //ASSUMING S is constant! Normally I would need to integrate this!!!  FIXME!!
            mfp = (E-positron_mass)/positron_stopping_power(E);
            which = Interactiontype::SlowDown;
        }else{
            //We consider positrons to *always* interact with a total dump of energy (locally.)
            mfp = 0.0;
            which = Interactiontype::LocalDump;
        }

        return;
    }

    FUNCERR("Interaction choice for unaccounted-for particle requested");

    return;
}


double photon_average_energy_absorbed(const double &E ){
    return E*photon_mass_coefficient_absorption(E)/photon_mass_coefficient_total(E);
}

double photon_average_energy_transferred(const double &E ){
    //There is a surplus of data here. We can do this multiple ways.
    //return photon_average_energy_absorbtion(E)/photon_one_minus_g(E);
    return E*photon_mass_coefficient_transfer(E)/photon_mass_coefficient_total(E);
}



/*
// Look-up table - Mass attenuation coefficients for photons in water. Coefficients are (MeV), (cm*cm/g).
// E | Coherent | Compton | Photoelectric | Pair+Triplet | Total Attenuation | Energy Tansfer | Energy Absorption | 1-g
0.0010 1.37 0.0132 4080 0 4080 4065 4065 1; 
0.0015 1.27 0.0267 1370 0 1380 1372 1372 1;
0.0020 1.15 0.0418 616 0 617 615.2 615.2 0.9999;
0.0030 0.909 0.0707 192 0 193 191.7 191.7 0.9999;
0.0040 0.708 0.0943 82.0 0 82.8 81.92 81.91 0.9999;
0.0050 0.558 0.112 41.9 0 42.6 41.89 41.88 0.9998;
0.0060 0.449 0.126 24.1 0 24.6 24.06 24.05 0.9998;
0.0080 0.31 0.144 9.92 0 10.4 9.918 9.915 0.9998;
0.0100 0.231 0.155 4.94 0 5.33 4.945 4.944 0.9998;
0.0150 0.133 0.17 1.37 0 1.67 1.374 1.374 0.9997;
0.0200 0.0886 0.177 0.544 0 0.81 0.5505 0.5503 0.9997;
0.0300 0.0469 0.183 0.146 0 0.376 0.1557 0.1557 0.9996;
0.0400 0.0287 0.183 0.0568 0 0.268 0.0695 0.06947 0.9996;
0.0500 0.0194 0.18 0.0272 0 0.227 0.04225 0.04223 0.9996;
0.0600 0.0139 0.177 0.0149 0 0.206 0.03191 0.0319 0.9996;
0.0800 0.00816 0.17 0.00577 0 0.184 0.02598 0.02597 0.9996;
0.1000 0.00535 0.163 0.00276 0 0.171 0.02547 0.02546 0.9996;
0.1500 0.00244 0.147 0.000731 0 0.151 0.02765 0.02764 0.9995;
0.2000 0.00139 0.135 0.000289 0 0.137 0.02969 0.02967 0.9994;
0.3000 0.000622 0.118 0.0000816 0 0.119 0.03195 0.03192 0.9992;
0.4000 0.000351 0.106 0.0000349 0 0.106 0.03282 0.03279 0.9989;
0.5000 0.000225 0.0966 0.0000188 0 0.0969 0.03303 0.03299 0.9987;
0.6000 0.000156 0.0894 0.0000117 0 0.0896 0.03289 0.03284 0.9984;
0.8000 0.0000879 0.0786 0.00000592 0 0.0787 0.03212 0.03206 0.998;
1.0000 0.0000563 0.0707 0.00000368 0 0.0707 0.03111 0.03103 0.9975;
1.2500 0.000036 0.0632 0.00000233 0.0000178 0.0632 0.02974 0.02965 0.9969;
1.5000 0.000025 0.0574 0.00000169 0.0000982 0.0575 0.02844 0.02833 0.9962;
2.0000 0.0000141 0.049 0.00000106 0.000391 0.0494 0.02621 0.02608 0.9948;
3.0000 0.00000626 0.0385 0.000000594 0.00113 0.0397 0.023 0.02281 0.9916;
4.0000 0.00000352 0.0322 0.000000408 0.00187 0.034 0.02091 0.02066 0.988;
5.0000 0.00000225 0.0278 0.000000309 0.00254 0.0303 0.1946 0.1915 0.984;
6.0000 0.00000156 0.0245 0.000000248 0.00316 0.0277 0.01843 0.01806 0.98;
8.0000 0.00000088 0.0201 0.000000178 0.00421 0.0243 0.01707 0.01658 0.9716;
10.000 0.000000563 0.0171 0.000000139 0.00509 0.0222 0.01626 0.01566 0.9633;
15.000 0.00000025 0.0127 0.0000000891 0.00675 0.0194 0.01528 0.01441 0.9432;
20.000 0.000000141 0.0102 0.0000000656 0.00798 0.0181 0.01495 0.01382 0.9245;
30.000 0.0000000626 0.0074 0.0000000429 0.00971 0.0171 0.0149 0.01327 0.8904;
40.000 0.0000000352 0.00588 0.0000000319 0.0109 0.0168 0.0151 0.01298 0.86;
50.000 0.0000000225 0.00491 0.0000000253 0.0118 0.0167 0.01537 0.01279 0.8323
*/


/*
if((n>0)&&(n<=2480))
    Photon_Energy(n)=0.25; % Photon Energy in MeV
elseif((n>2480)&&(n<=15000))
    Photon_Energy(n)=0.5; % Photon Energy in MeV
elseif((n>15000)&&(n<=27290))
    Photon_Energy(n)=0.75; % Photon Energy in MeV
elseif((n>27290)&&(n<=37590))
    Photon_Energy(n)=1; % Photon Energy in MeV
elseif((n>37590)&&(n<=46310))
    Photon_Energy(n)=1.25; % Photon Energy in MeV
elseif((n>46310)&&(n<=53760))
    Photon_Energy(n)=1.5; % Photon Energy in MeV
elseif((n>53760)&&(n<=60140))
    Photon_Energy(n)=1.75; % Photon Energy in MeV
elseif((n>60140)&&(n<=65680))
    Photon_Energy(n)=2; % Photon Energy in MeV
elseif((n>65680)&&(n<=70460))
    Photon_Energy(n)=2.25; % Photon Energy in MeV
elseif((n>70460)&&(n<=74630))
    Photon_Energy(n)=2.5; % Photon Energy in MeV
elseif((n>74630)&&(n<=78290))
    Photon_Energy(n)=2.75; % Photon Energy in MeV
elseif((n>78290)&&(n<=81510))
    Photon_Energy(n)=3; % Photon Energy in MeV
elseif((n>81510)&&(n<=84330))
    Photon_Energy(n)=3.25; % Photon Energy in MeV
elseif((n>84330)&&(n<=86860))
    Photon_Energy(n)=3.5; % Photon Energy in MeV
elseif((n>86860)&&(n<=89090))
    Photon_Energy(n)=3.75; % Photon Energy in MeV
elseif((n>89090)&&(n<=91060))
    Photon_Energy(n)=4; % Photon Energy in MeV
elseif((n>91060)&&(n<=92790))
    Photon_Energy(n)=4.25; % Photon Energy in MeV
elseif((n>92790)&&(n<=94330))
    Photon_Energy(n)=4.5; % Photon Energy in MeV
elseif((n>94330)&&(n<=95670))
    Photon_Energy(n)=4.75; % Photon Energy in MeV
elseif((n>95670)&&(n<=96840))
    Photon_Energy(n)=5; % Photon Energy in MeV
elseif((n>96840)&&(n<=97850))
    Photon_Energy(n)=5.25; % Photon Energy in MeV
elseif((n>97850)&&(n<=98710))
    Photon_Energy(n)=5.5; % Photon Energy in MeV
elseif((n>98710)&&(n<=99420))
    Photon_Energy(n)=5.75; % Photon Energy in MeV
elseif((n>99420)&&(n<=100000))
    Photon_Energy(n)=6; % Photon Energy in MeV
end
*/

#ifdef __cplusplus
    }

#endif

