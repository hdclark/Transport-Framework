//Water.cc - Basic, non-interactive module for handling water mediums. Uses a lookup table for mass attenutation coefficients.
//
//Programming notes:
//  -Do not make items here "const", because they will not show up when loading.
//  -Avoid using macro variables here because they will be obliterated during loading.
//  -Wrap dynamically-loaded code with extern "C", otherwise C++ compilation will mangle function names, etc.
//
// From man page for dlsym/dlopen:  For running some 'initialization' code prior to finishing loading:
// "Instead,  libraries  should  export  routines using the __attribute__((constructor)) and __attribute__((destructor)) function attributes.  See the gcc info pages for
//       information on these.  Constructor routines are executed before dlopen() returns, and destructor routines are executed before dlclose() returns."
//   ---for instance, we can use this to seed a random number generator with a random seed. However, in order to pass in a specific seed (and pass that seed to the library)
//      we need to define an explicitly callable initialization function. In general, these libraries should have both so that we can quickly adjust behaviour if desired.
//  

#include <iostream>
#include <string>
#include <vector>

#include <cmath>

#include "./Misc.h"

#ifdef __cplusplus
    extern "C" {
#endif

std::string MODULE_NAME(__FILE__);
std::string FILE_TYPE("MEDIUM");
std::string PARTICLE_TYPE("WATER");

bool VERBOSE = true;


//Coherent.
static float mass_coeff_coherent [][2] = { {0.0010, 1.37},
        {0.0015, 1.27},
        {0.0020, 1.15},
        {0.0030, 0.909},
        {0.0040, 0.708},
        {0.0050, 0.558},
        {0.0060, 0.449},
        {0.0080, 0.31},
        {0.0100, 0.231},
        {0.0150, 0.133},
        {0.0200, 0.0886},
        {0.0300, 0.0469},
        {0.0400, 0.0287},
        {0.0500, 0.0194},
        {0.0600, 0.0139},
        {0.0800, 0.00816},
        {0.1000, 0.00535},
        {0.1500, 0.00244},
        {0.2000, 0.00139},
        {0.3000, 0.000622},
        {0.4000, 0.000351},
        {0.5000, 0.000225},
        {0.6000, 0.000156},
        {0.8000, 0.0000879},
        {1.0000, 0.0000563},
        {1.2500, 0.000036},
        {1.5000, 0.000025},
        {2.0000, 0.0000141},
        {3.0000, 0.00000626},
        {4.0000, 0.00000352},
        {5.0000, 0.00000225},
        {6.0000, 0.00000156},
        {8.0000, 0.00000088},
        {10.000, 0.000000563},
        {15.000, 0.00000025},
        {20.000, 0.000000141},
        {30.000, 0.0000000626},
        {40.000, 0.0000000352},
        {50.000, 0.0000000225} };
/*
A               = 0.00635323       +/- 0.002785     (43.84%)
B               = 0.459561         +/- 0.1127       (24.53%)
C               = 225.552          +/- 5.7          (2.527%)
D               = -0.002012        +/- 0.000195     (9.694%)
gnuplot> plot 'Coherent', g(x)
gnuplot> replot
gnuplot> g(x) = (A)*x**(-B) + exp(-C*(x+D))
*/






//Compton
static float mass_coeff_compton [][2] = { {0.0010, 0.0132},
        {0.0015, 0.0267},
        {0.0020, 0.0418},
        {0.0030, 0.0707},
        {0.0040, 0.0943},
        {0.0050, 0.112},
        {0.0060, 0.126},
        {0.0080, 0.144},
        {0.0100, 0.155},
        {0.0150, 0.17},
        {0.0200, 0.177},
        {0.0300, 0.183},
        {0.0400, 0.183},
        {0.0500, 0.18},
        {0.0600, 0.177},
        {0.0800, 0.17},
        {0.1000, 0.163},
        {0.1500, 0.147},
        {0.2000, 0.135},
        {0.3000, 0.118},
        {0.4000, 0.106},
        {0.5000, 0.0966},
        {0.6000, 0.0894},
        {0.8000, 0.0786},
        {1.0000, 0.0707},
        {1.2500, 0.0632},
        {1.5000, 0.0574},
        {2.0000, 0.049},
        {3.0000, 0.0385},
        {4.0000, 0.0322},
        {5.0000, 0.0278},
        {6.0000, 0.0245},
        {8.0000, 0.0201},
        {10.000, 0.0171},
        {15.000, 0.0127},
        {20.000, 0.0102},
        {30.000, 0.0074},
        {40.000, 0.00588},
        {50.000, 0.00491} };

//Photoelectric
static float mass_coeff_photoelectric [][2] = { {0.0010, 4080},
        {0.0015, 1370},
        {0.0020, 616},
        {0.0030, 192},
        {0.0040, 82.0},
        {0.0050, 41.9},
        {0.0060, 24.1},
        {0.0080, 9.92},
        {0.0100, 4.94},
        {0.0150, 1.37},
        {0.0200, 0.544},
        {0.0300, 0.146},
        {0.0400, 0.0568},
        {0.0500, 0.0272},
        {0.0600, 0.0149},
        {0.0800, 0.00577},
        {0.1000, 0.00276},
        {0.1500, 0.000731},
        {0.2000, 0.000289},
        {0.3000, 0.0000816},
        {0.4000, 0.0000349},
        {0.5000, 0.0000188},
        {0.6000, 0.0000117},
        {0.8000, 0.00000592},
        {1.0000, 0.00000368},
        {1.2500, 0.00000233},
        {1.5000, 0.00000169},
        {2.0000, 0.00000106},
        {3.0000, 0.000000594},
        {4.0000, 0.000000408},
        {5.0000, 0.000000309},
        {6.0000, 0.000000248},
        {8.0000, 0.000000178},
        {10.000, 0.000000139},
        {15.000, 0.0000000891},
        {20.000, 0.0000000656},
        {30.000, 0.0000000429},
        {40.000, 0.0000000319},
        {50.000, 0.0000000253} };

//Pair+triplet
static float mass_coeff_pair_triplet [][2] = { {0.0010, 0},
        {0.0015, 0},
        {0.0020, 0},
        {0.0030, 0},
        {0.0040, 0},
        {0.0050, 0},
        {0.0060, 0},
        {0.0080, 0},
        {0.0100, 0},
        {0.0150, 0},
        {0.0200, 0},
        {0.0300, 0},
        {0.0400, 0},
        {0.0500, 0},
        {0.0600, 0},
        {0.0800, 0},
        {0.1000, 0},
        {0.1500, 0},
        {0.2000, 0},
        {0.3000, 0},
        {0.4000, 0},
        {0.5000, 0},
        {0.6000, 0},
        {0.8000, 0},
        {1.0000, 0},
        {1.2500, 0.0000178},
        {1.5000, 0.0000982},
        {2.0000, 0.000391},
        {3.0000, 0.00113},
        {4.0000, 0.00187},
        {5.0000, 0.00254},
        {6.0000, 0.00316},
        {8.0000, 0.00421},
        {10.000, 0.00509},
        {15.000, 0.00675},
        {20.000, 0.00798},
        {30.000, 0.00971},
        {40.000, 0.0109},
        {50.000, 0.0118} };


//Total Attenuation
static float mass_coeff_total [][2] = { {0.0010, 4080},
        {0.0015, 1380},
        {0.0020, 617},
        {0.0030, 193},
        {0.0040, 82.8},
        {0.0050, 42.6},
        {0.0060, 24.6},
        {0.0080, 10.4},
        {0.0100, 5.33},
        {0.0150, 1.67},
        {0.0200, 0.81},
        {0.0300, 0.376},
        {0.0400, 0.268},
        {0.0500, 0.227},
        {0.0600, 0.206},
        {0.0800, 0.184},
        {0.1000, 0.171},
        {0.1500, 0.151},
        {0.2000, 0.137},
        {0.3000, 0.119},
        {0.4000, 0.106},
        {0.5000, 0.0969},
        {0.6000, 0.0896},
        {0.8000, 0.0787},
        {1.0000, 0.0707},
        {1.2500, 0.0632},
        {1.5000, 0.0575},
        {2.0000, 0.0494},
        {3.0000, 0.0397},
        {4.0000, 0.034},
        {5.0000, 0.0303},
        {6.0000, 0.0277},
        {8.0000, 0.0243},
        {10.000, 0.0222},
        {15.000, 0.0194},
        {20.000, 0.0181},
        {30.000, 0.0171},
        {40.000, 0.0168},
        {50.000, 0.0167} };

//Etransfer
static float mass_coeff_energy_transfer [][2] = { {0.0010, 4065},
        {0.0015, 1372},
        {0.0020, 615.2},
        {0.0030, 191.7},
        {0.0040, 81.92},
        {0.0050, 41.89},
        {0.0060, 24.06},
        {0.0080, 9.918},
        {0.0100, 4.945},
        {0.0150, 1.374},
        {0.0200, 0.5505},
        {0.0300, 0.1557},
        {0.0400, 0.0695},
        {0.0500, 0.04225},
        {0.0600, 0.03191},
        {0.0800, 0.02598},
        {0.1000, 0.02547},
        {0.1500, 0.02765},
        {0.2000, 0.02969},
        {0.3000, 0.03195},
        {0.4000, 0.03282},
        {0.5000, 0.03303},
        {0.6000, 0.03289},
        {0.8000, 0.03212},
        {1.0000, 0.03111},
        {1.2500, 0.02974},
        {1.5000, 0.02844},
        {2.0000, 0.02621},
        {3.0000, 0.023},
        {4.0000, 0.02091},
        {5.0000, 0.01946},
        {6.0000, 0.01843},
        {8.0000, 0.01707},
        {10.000, 0.01626},
        {15.000, 0.01528},
        {20.000, 0.01495},
        {30.000, 0.0149},
        {40.000, 0.0151},
        {50.000, 0.01537} };

//Eabsorption
static float mass_coeff_energy_absorption [][2] = { {0.0010, 4065},
        {0.0015, 1372},
        {0.0020, 615.2},
        {0.0030, 191.7},
        {0.0040, 81.91},
        {0.0050, 41.88},
        {0.0060, 24.05},
        {0.0080, 9.915},
        {0.0100, 4.944},
        {0.0150, 1.374},
        {0.0200, 0.5503},
        {0.0300, 0.1557},
        {0.0400, 0.06947},
        {0.0500, 0.04223},
        {0.0600, 0.0319},
        {0.0800, 0.02597},
        {0.1000, 0.02546},
        {0.1500, 0.02764},
        {0.2000, 0.02967},
        {0.3000, 0.03192},
        {0.4000, 0.03279},
        {0.5000, 0.03299},
        {0.6000, 0.03284},
        {0.8000, 0.03206},
        {1.0000, 0.03103},
        {1.2500, 0.02965},
        {1.5000, 0.02833},
        {2.0000, 0.02608},
        {3.0000, 0.02281},
        {4.0000, 0.02066},
        {5.0000, 0.01915},
        {6.0000, 0.01806},
        {8.0000, 0.01658},
        {10.000, 0.01566},
        {15.000, 0.01441},
        {20.000, 0.01382},
        {30.000, 0.01327},
        {40.000, 0.01298},
        {50.000, 0.01279} };

//1-g
static float mass_coeff_one_minus_g [][2] = { {0.0010, 1.0},
        {0.0015, 1.0},
        {0.0020, 0.9999},
        {0.0030, 0.9999},
        {0.0040, 0.9999},
        {0.0050, 0.9998},
        {0.0060, 0.9998},
        {0.0080, 0.9998},
        {0.0100, 0.9998},
        {0.0150, 0.9997},
        {0.0200, 0.9997},
        {0.0300, 0.9996},
        {0.0400, 0.9996},
        {0.0500, 0.9996},
        {0.0600, 0.9996},
        {0.0800, 0.9996},
        {0.1000, 0.9996},
        {0.1500, 0.9995},
        {0.2000, 0.9994},
        {0.3000, 0.9992},
        {0.4000, 0.9989},
        {0.5000, 0.9987},
        {0.6000, 0.9984},
        {0.8000, 0.998},
        {1.0000, 0.9975},
        {1.2500, 0.9969},
        {1.5000, 0.9962},
        {2.0000, 0.9948},
        {3.0000, 0.9916},
        {4.0000, 0.988},
        {5.0000, 0.984},
        {6.0000, 0.98},
        {8.0000, 0.9716},
        {10.000, 0.9633},
        {15.000, 0.9432},
        {20.000, 0.9245},
        {30.000, 0.8904},
        {40.000, 0.86},
        {50.000, 0.8323} };



double photon_coherent(const double &E){
    return  
(-4.024545730610547*10^7*powf(x,3.0)+120736.3719183164*powf(x,2.0)-310.6750075917898*x+1.600184092979579)*charfun2(x,-inf,0.0015)+
(-2.755643736757962*10^-12*powf(x,3.0)+4.133465605136944*10^-10*powf(x,2.0)-2.1661763652008922*10^-8*x+4.1667724841095555*10^-7)*charfun2(x,40.0,inf)+
(-9.217813162102028*10^-13*powf(x,3.0)+1.932830700479632*10^-10*powf(x,2.0)-1.285922403337968*10^-8*x+2.9931005349589895*10^-7)*charfun2(x,30.0,40.0)+
(-2.98572309984012*10^-11*powf(x,3.0)+2.797473541445154*10^-9*powf(x,2.0)-9.098493817529538*10^-8*x+1.080567194915056*10^-6)*charfun2(x,20.0,30.0)+
(-7.420511506895614*10^-11*powf(x,3.0)+5.458346585678447*10^-9*powf(x,2.0)-1.442023990599613*10^-7*x+1.4353502674794952*10^-6)*charfun2(x,15.0,20.0)+
(-8.585585520387882*10^-10*powf(x,3.0)+4.0754251249320894*10^-8*powf(x,2.0)-6.736409690145978*10^-7*x+4.082543117252678*10^-6)*charfun2(x,10.0,15.0)+
(-3.095375245967242*10^-9*powf(x,3.0)+1.078587520671745*10^-7*powf(x,2.0)-1.3446859771931338*10^-6*x+6.319359811181131*10^-6)*charfun2(x,8.0,10.0)+
(-1.4900629082006556*10^-8*powf(x,3.0)+3.91184844132118*10^-7*powf(x,2.0)-3.611294713712682*10^-6*x+1.2363649775233261*10^-5)*charfun2(x,6.0,8.0)+
(-4.068195436002603*10^-8*powf(x,3.0)+8.552486991364686*10^-7*powf(x,2.0)-6.395677843738787*10^-6*x+1.7932416035285464*10^-5)*charfun2(x,5.0,6.0)+
(-1.306431868878699*10^-7*powf(x,3.0)+2.204667187054127*10^-6*powf(x,2.0)-1.314277028332708*10^-5*x+2.917757010126596*10^-5)*charfun2(x,4.0,5.0)+
(-3.267452980884942*10^-7*powf(x,3.0)+4.557892521461618*10^-6*powf(x,2.0)-2.255567162095704*10^-5*x+4.17281052181059*10^-5)*charfun2(x,3.0,4.0)+charfun2(x,0.0015,0.002)*
(4.1227286530527246*10^7*powf(x,3.0)-245890.9753465308*powf(x,2.0)+239.266013305481*x+1.325213582530943)+charfun2(x,0.002,0.003)*
(7097705.877683126*powf(x,3.0)-41113.49142946609*powf(x,2.0)-170.2889545286489*x+1.598250227753697)+charfun2(x,0.003,0.004)*
(1565982.938318863*powf(x,3.0)+8672.015024812266*powf(x,2.0)-319.645473891484*x+1.747606747116532)+charfun2(x,2.0,3.0)*
(-2.1923756207581532*10^-6*powf(x,3.0)+2.1348565425488553*10^-5*powf(x,2.0)-7.292769033303783*10^-5*x+9.210012393018671*10^-5)+charfun2(x,1.5,2.0)*
(-1.5443632277394845*10^-5*powf(x,3.0)+1.0085610536530869*10^-4*powf(x,2.0)-2.3194277021267812*10^-4*x+1.981101771832802*10^-4)+charfun2(x,1.25,1.5)*
(-4.065740770519655*10^-5*powf(x,3.0)+2.143180947904164*10^-4*powf(x,2.0)-4.021357543503397*10^-4*x+2.8320666925211097*10^-4)+charfun2(x,1.0,1.25)*
(-1.41034880537762*10^-4*powf(x,3.0)+5.907336179125368*10^-4*powf(x,2.0)-8.726551582529903*10^-4*x+4.7925642087821524*10^-4)+charfun2(x,0.8,1.0)*
(-2.54541017473682*10^-4*powf(x,3.0)+9.312520287202969*10^-4*powf(x,2.0)-0.00121317356906075*x+5.927625578141353*10^-4)+charfun2(x,0.6,0.8)*
(-.001613505149639077*powf(x,3.0)+.004192765945917245*powf(x,2.0)-.003822384702818309*x+.001288552193482818)+charfun2(x,0.5,0.6)*
(-.002750320301549139*powf(x,3.0)+.006239033219355357*powf(x,2.0)-.005050145066881177*x+.001534104266295391)+charfun2(x,0.3,0.4)*
(-.01533261985478577*powf(x,3.0)+.02575647608104945*powf(x,2.0)-.01506646391046387*x+.003237837061923929)+charfun2(x,0.4,0.5)*
(-.01747926496091623*powf(x,3.0)+.02833245020840598*powf(x,2.0)-.01609685356140649*x+.003375222348716277)+charfun2(x,0.2,0.3)*
(-.2731902556199411*powf(x,3.0)+.2578283482696893*powf(x,2.0)-.08468802556705582*x+.01019999322758312)+charfun2(x,0.15,0.2)*
(-.7859093286162846*powf(x,3.0)+.5654597920674955*powf(x,2.0)-.1462143143266171*x+.01430174581155388)+charfun2(x,0.1,0.15)*
(-7.193885561009603*powf(x,3.0)+3.449049096644488*powf(x,2.0)-0.578752710013166*x+.03592866559588131)+charfun2(x,0.08,0.1)*
(-24.80718479652873*powf(x,3.0)+8.733038867300227*powf(x,2.0)-1.10715168707874*x+.05354196483140045)+charfun2(x,0.06,0.08)*
(-113.1257331831952*powf(x,3.0)+29.92949048010018*powf(x,2.0)-2.802867816102736*x+.09876106160537368)+charfun2(x,0.05,0.06)*
(-212.445380595273*powf(x,3.0)+47.80702701427417*powf(x,2.0)-3.875520008153177*x+.1202141054463825)+charfun2(x,0.04,0.05)*
(-824.4013955986203*powf(x,3.0)+139.6004292647763*powf(x,2.0)-8.465190120678283*x+.1967086073218008)+charfun2(x,0.03,0.04)*
(-1589.949037010248*powf(x,3.0)+231.4661462341716*powf(x,2.0)-12.13981879945409*x+.2457036563721451)+charfun2(x,0.02,0.03)*
(-7415.802456360414*powf(x,3.0)+755.7929539756865*powf(x,2.0)-27.86962303169954*x+.4030016986945995)+charfun2(x,0.015,0.02)*
(-31556.32586900464*powf(x,3.0)+2204.22435873434*powf(x,2.0)-56.83825112687262*x+.5961258859957532)+charfun2(x,0.01,0.015)*
(-146680.4480173523*powf(x,3.0)+7384.809855409986*powf(x,2.0)-134.5470335770073*x+.9846697982464268)+charfun2(x,0.008,0.01)*
(-669059.0740519706*powf(x,3.0)+23056.16863644854*powf(x,2.0)-291.2606213873928*x+1.507048424281046)+charfun2(x,0.006,0.008)*
(-1170308.214850733*powf(x,3.0)+35086.14801561882*powf(x,2.0)-387.5004564207551*x+1.763687984370011)+charfun2(x,0.005,0.006)*
(-2119432.414486066*powf(x,3.0)+52170.38360905486*powf(x,2.0)-490.005869981371*x+1.968698811491243)+charfun2(x,0.004,0.005)*
(-2361637.630958267*powf(x,3.0)+55803.46185613783*powf(x,2.0)-508.1712612167862*x+1.998974463550269);

}
double photon_compton(const double &E){
    return
(3400942.304257767*powf(x,3.0)-10202.8269127733*powf(x,2.0)+36.35259133670887*x-.01635070672819334)*charfun2(x,-inf,0.0015)+
(-9.662292440580217*10^-8*powf(x,3.0)+1.4493438660870323*10^-5*powf(x,2.0)-8.120096406029361*10^-4*x+.02135475092869625)*charfun2(x,40.0,inf)+
(-6.688537797099053*10^-8*powf(x,3.0)+1.0924933088692926*10^-5*powf(x,2.0)-6.692694177158404*10^-4*x+.01945154795686832)*charfun2(x,30.0,40.0)+
(-3.6583556371023446*10^-7*powf(x,3.0)+3.7830449805224886*10^-5*powf(x,2.0)-.001476434919211798*x+0.0275232029718279)*charfun2(x,20.0,30.0)+
(-7.351526652744441*10^-7*powf(x,3.0)+5.998947589907746*10^-5*powf(x,2.0)-.001919615441088851*x+.03047773978434158)*charfun2(x,15.0,20.0)+
(-5.172110280583475*10^-6*powf(x,3.0)+2.596525685879839*10^-4*powf(x,2.0)-.004914561831422446*x+.04545247173600955)*charfun2(x,10.0,15.0)+
(-4.4694839553073007*10^-6*powf(x,3.0)+2.385737788296986*10^-4*powf(x,2.0)-.004703773933839592*x+.04474984541073337)*charfun2(x,8.0,10.0)+
(-4.816332005298413*10^-5*powf(x,3.0)+.001287225845173942*powf(x,2.0)-.01309299046459354*x+0.0671210894927439)*charfun2(x,6.0,8.0)+
(-3.179502755124865*10^-5*powf(x,3.0)+9.925965801427039*10^-4*powf(x,2.0)-.01132521487440611*x+.06358553831236907)*charfun2(x,5.0,6.0)+
(-1.0045269380330406*10^-4*powf(x,3.0)+.002022461573923534*powf(x,2.0)-.01647453984331027*x+.07216774659387598)*charfun2(x,4.0,5.0)+
(-3.6639419723553035*10^-4*powf(x,3.0)+0.00521375961511025*powf(x,2.0)-.02923973200805713*x+.08918800281353848)*charfun2(x,3.0,4.0)+charfun2(x,0.004,0.005)*
(643523.6975853164*powf(x,3.0)-11081.64953926434*powf(x,2.0)+78.17990030067477*x-.08229872521992992)+charfun2(x,0.006,0.008)*
(219371.8595044525*powf(x,3.0)-5974.152000901251*powf(x,2.0)+60.17109280595854*x-0.0673414064562679)+charfun2(x,0.008,0.01)*
(53599.23229884548*powf(x,3.0)-1995.608947966682*powf(x,2.0)+28.34274838248197*x+.01753417867300289)+charfun2(x,0.01,0.015)*
(17112.83128818418*powf(x,3.0)-901.016917646843*powf(x,2.0)+17.39682807928359*x+.05402057968366414)+charfun2(x,0.015,0.02)*
(5488.635159605907*powf(x,3.0)-377.9280918608209*powf(x,2.0)+9.55049569249326*x+.09325224161761603)+charfun2(x,0.04,0.05)*
(721.4806912854466*powf(x,3.0)-103.166507440502*powf(x,2.0)+4.583953452803957*x+.1185335095503764)+charfun2(x,0.02,0.03)*
(663.656132571507*powf(x,3.0)-88.42935023875697*powf(x,2.0)+3.760520860051983*x+0.131852073833891)+charfun2(x,0.03,0.04)*
(403.7157940357631*powf(x,3.0)-65.03471977054*powf(x,2.0)+3.058681946005477*x+0.138870462974356)+charfun2(x,0.06,0.08)*
(75.10739943148126*powf(x,3.0)-17.15289242067816*powf(x,2.0)+.9398154273090213*x+.1661382887987001)+charfun2(x,0.1,0.15)*
(6.074299780944327*powf(x,3.0)-1.680263182781349*powf(x,2.0)-.1884634438995185*x+.1925746764368211)+charfun2(x,0.4,0.5)*
(.06659076284316023*powf(x,3.0)+.02458463503620234*powf(x,2.0)-.1567465368669099*x+.1605032643190093)+charfun2(x,2.0,3.0)*
(-7.339705172545782*10^-4*powf(x,3.0)+.008521946495281681*powf(x,2.0)-.03916429264857142*x+.09911256345405277)+charfun2(x,1.5,2.0)*
(-.003427141718493013*powf(x,3.0)+.02468097370271229*powf(x,2.0)-.07148234706343262*x+.1206579330639602)+charfun2(x,1.25,1.5)*
(-.005002535240047758*powf(x,3.0)+.03177024454970864*powf(x,2.0)-.08211625333392716*x+.1259748861992075)+charfun2(x,1.0,1.25)*
(-0.00971663604381047*powf(x,3.0)+.04944812256381881*powf(x,2.0)-.1042136008515649*x+.1351821143315565)+charfun2(x,0.8,1.0)*
(-0.024327331454097*powf(x,3.0)+.09328020879467842*powf(x,2.0)-.1480456870824245*x+.1497928097418431)+charfun2(x,0.6,0.8)*
(-.03788119840563847*powf(x,3.0)+.1258094894783779*powf(x,2.0)-.1740691116293842*x+.1567323896210323)+charfun2(x,0.5,0.6)*
(-.2228248231757136*powf(x,3.0)+.4587080140645131*powf(x,2.0)-.3738082263810651*x+.1966802125713685)+charfun2(x,0.3,0.4)*
(-.4435382281969436*powf(x,3.0)+.6367394242843272*powf(x,2.0)-.4016084525661596*x+.1931515197455759)+charfun2(x,0.2,0.3)*
(-.6924378500554127*powf(x,3.0)+.8607490839569489*powf(x,2.0)-.4688113504679463*x+.1998718095357546)+charfun2(x,0.15,0.2)*
(-4.052568964799313*powf(x,3.0)+2.87682775280329*powf(x,2.0)-.8720270842372142*x+.2267528584537058)+charfun2(x,0.08,0.1)*
(-12.18094485625656*powf(x,3.0)+3.796310208378919*powf(x,2.0)-.7361207830155472*x+.2108299210740221)+charfun2(x,0.05,0.06)*
(-289.6385591775504*powf(x,3.0)+48.50138012894755*powf(x,2.0)-2.999440925668523*x+.2449234158582508)+charfun2(x,0.003,0.004)*
(-175206.6388957823*powf(x,3.0)-1256.885501491151*powf(x,2.0)+38.88084414958202*x-.02989998368513958)+charfun2(x,0.005,0.006)*
(-198888.151445504*powf(x,3.0)+1554.528196197965*powf(x,2.0)+14.99901162336323*x+.02300275590892276)+charfun2(x,0.002,0.003)*
(-542697.1420021665*powf(x,3.0)+2050.529026466302*powf(x,2.0)+28.95860056570966*x-0.0199777401012672)+charfun2(x,0.0015,0.002)*
(-4204711.521288898*powf(x,3.0)+24022.61530218669*powf(x,2.0)-14.98557198573113*x+.009318374933026674);
 
}
double photon_photoelectric(const double &E){
    return 
(3.906918119783624*10^12*powf(x,3.0)-1.172075435935087*10^10*powf(x,2.0)+5324024.829404967*x+6569.811410162281)*charfun2(x,-inf,0.0015)+
(-7.591917962605931*10^-13*powf(x,3.0)+1.13878769439089*10^-10*powf(x,2.0)-6.27801929232839*10^-9*x+1.4940301555127117*10^-7)*charfun2(x,40.0,inf)+
(-6.040410186970354*10^-13*powf(x,3.0)+9.526067613146203*10^-11*powf(x,2.0)-5.533295560023311*10^-9*x+1.3947336578720346*10^-7)*charfun2(x,30.0,40.0)+
(-4.124644128951276*10^-12*powf(x,3.0)+4.121149560543437*10^-10*powf(x,2.0)-1.5038923957709757*10^-8*x+2.34529649764068*10^-7)*charfun2(x,20.0,30.0)+
(-1.491679152544476*10^-11*powf(x,3.0)+1.0596437998439526*10^-9*powf(x,2.0)-2.798950083350194*10^-8*x+3.208668289360158*10^-7)*charfun2(x,15.0,20.0)+
(-7.076151904586939*10^-11*powf(x,3.0)+3.5726565382630615*10^-9*powf(x,2.0)-6.568469190978856*10^-8*x+5.093427843174491*10^-7)*charfun2(x,10.0,15.0)+
(-2.850903019844734*10^-10*powf(x,3.0)+1.000252002642118*10^-8*powf(x,2.0)-1.2998332679136976*10^-7*x+7.236715672560529*10^-7)*charfun2(x,8.0,10.0)+
(-9.997375231906511*10^-10*powf(x,3.0)+2.715405333536945*10^-8*powf(x,2.0)-2.6719559326295583*10^-7*x+1.0895709445136159*10^-6)*charfun2(x,6.0,8.0)+
(-2.5226163389494083*10^-9*powf(x,3.0)+5.456587201902708*10^-8*powf(x,2.0)-4.3166650536490175*10^-7*x+1.4185127687175078*10^-6)*charfun2(x,5.0,6.0)+
(-7.069362469377553*10^-9*powf(x,3.0)+1.2276706397544926*10^-7*powf(x,2.0)-7.726724651470125*10^-7*x+1.9868560350210254*10^-6)*charfun2(x,4.0,5.0)+
(-1.8199933783540354*10^-8*powf(x,3.0)+2.5633391974540287*10^-7*powf(x,2.0)-1.306939888226827*10^-6*x+2.699212599127445*10^-6)*charfun2(x,3.0,4.0)+charfun2(x,0.002,0.003)*
(6.66154283230926*10^10*powf(x,3.0)-3.6920128864030466*10^8*powf(x,2.0)+156313.3050627641*x+1247.25511785095)+charfun2(x,0.004,0.005)*
(9.523388524766133*10^9*powf(x,3.0)-1.2412220866555898*10^8*powf(x,2.0)+496073.1779792969*x-525.8342388532761)+charfun2(x,0.15,0.2)*
(.5556258542637516*powf(x,3.0)-.2614878633292303*powf(x,2.0)+.03128536064583359*x+4.6435569892482326*10^-5)+charfun2(x,0.3,0.4)*
(.03698838976644835*powf(x,3.0)-.04024438402159455*powf(x,2.0)+.01401836460153029*x-.001500601342209684)+charfun2(x,0.5,0.6)*
(0.00239274701923665*powf(x,3.0)-.004021022089637869*powf(x,2.0)+.002174724511096304*x-3.6240011054326626*10^-4)+charfun2(x,0.8,1.0)*
(5.193621312695285*10^-5*powf(x,3.0)-1.349637660775414*10^-4*powf(x,2.0)+1.0501041890980953*10^-4*x-1.8302865959221007*10^-5)+charfun2(x,2.0,3.0)*
(-1.1313090239646091*10^-7*powf(x,3.0)+1.1107126372616875*10^-6*powf(x,2.0)-3.870076040775681*10^-6*x+5.2623487516763*10^-6)+charfun2(x,1.5,2.0)*
(-1.0369602722883084*10^-6*powf(x,3.0)+6.653688856612773*10^-6*powf(x,2.0)-1.4956028479477854*10^-5*x+1.2652983710811078*10^-5)+charfun2(x,1.25,1.5)*
(-1.0994295133686269*10^-6*powf(x,3.0)+6.934800441474208*10^-6*powf(x,2.0)-1.5377695856770002*10^-5*x+1.2863817399457156*10^-5)+charfun2(x,1.0,1.25)*
(-2.404391138263376*10^-5*powf(x,3.0)+9.297660745121843*10^-5*powf(x,2.0)-1.2292995461895032*10^-4*x+5.767725855036561*10^-5)+charfun2(x,0.6,0.8)*
(-4.937323326015918*10^-4*powf(x,3.0)+.001174640743670966*powf(x,2.0)-9.426731888889964*10^-4*x+2.610794294537939*10^-4)+charfun2(x,0.4,0.5)*
(-.01524528419642125*powf(x,3.0)+.02243602473384898*powf(x,2.0)-.01105379890064712*x+.001842353791413971)+charfun2(x,0.2,0.3)*
(-.2628082748693724*powf(x,3.0)+.2295726141506441*powf(x,2.0)-0.0669267348501413*x+.006593908602957473)+charfun2(x,0.1,0.15)*
(-12.59862330215794*powf(x,3.0)+5.657924257060532*powf(x,2.0)-.8566264574126309*x+0.0444420264728157)+charfun2(x,0.08,0.1)*
(-24.83237401618596*powf(x,3.0)+9.328049471268939*powf(x,2.0)-1.223638978833472*x+.05667577718684372)+charfun2(x,0.05,0.06)*
(-382.4544418961462*powf(x,3.0)+99.39034344535591*powf(x,2.0)-8.682602357734224*x+.2606610645103395)+charfun2(x,0.06,0.08)*
(-453.0044032777549*powf(x,3.0)+112.0893364940455*powf(x,2.0)-9.444541940655593*x+.2758998561687671)+charfun2(x,0.03,0.04)*
(-4805.469519266444*powf(x,3.0)+897.0190897641877*powf(x,2.0)-53.93109906220729*x+1.086363468098644)+charfun2(x,0.04,0.05)*
(-9278.019009709344*powf(x,3.0)+1433.725028617336*powf(x,2.0)-75.39933661633322*x+1.372606635486989)+charfun2(x,0.02,0.03)*
(-220700.1029132251*powf(x,3.0)+20327.53609522047*powf(x,2.0)-636.8466092258957*x+6.915518569735527)+charfun2(x,0.015,0.02)*
(-1647482.459396722*powf(x,3.0)+105934.4774842303*powf(x,2.0)-2348.985437006093*x+18.32977742160351)+charfun2(x,0.01,0.015)*
(-1.0880375734845615*10^7*powf(x,3.0)+521414.6748794306*powf(x,2.0)-8581.188397934096*x+49.49079222624351)+charfun2(x,0.006,0.008)*
(-1.0126463025005647*10^8*powf(x,3.0)+3649832.889134475*powf(x,2.0)-43200.4951708743*x+173.7821471504169)+charfun2(x,0.008,0.01)*
(-1.707463933831764*10^8*powf(x,3.0)+5317395.204329354*powf(x,2.0)-56540.99369243332*x+209.3568098745743)+charfun2(x,0.005,0.006)*
(-5.633849887099844*10^9*powf(x,3.0)+1.0323636751243066*10^8*powf(x,2.0)-640719.7029106513*x+1368.820562629971)+charfun2(x,0.003,0.004)*
(-8.005970421196468*10^10*powf(x,3.0)+9.508749041752109*10^8*powf(x,2.0)-3803915.273383782*x+5207.483696297496)+charfun2(x,0.0015,0.002)*
(-3.886590598918124*10^12*powf(x,3.0)+2.335003487480699*10^10*powf(x,2.0)-4.7282159021831827*10^7*x+32872.90333578068);

}

double photon_pair_triplet(const double &E){
    return 
(-3.179998266633572*10^-14*powf(x,3.0)+9.539994799900716*10^-17*powf(x,2.0)-8.744995233242324*10^-20*x+2.384998699975179*10^-23)*charfun2(x,-inf,0.0015)+
(5.32389918209788*10^-8*powf(x,3.0)-7.985848773146819*10^-6*powf(x,2.0)+4.839685394752431*10^-4*x+9.113209814825413*10^-4)*charfun2(x,40.0,inf)+
(2.3805040895106355*10^-8*powf(x,3.0)-4.4537746620421265*10^-6*powf(x,2.0)+3.4268557503105523*10^-4*x+0.00279509384073838)*charfun2(x,30.0,40.0)+
(1.0154084459859605*10^-7*powf(x,3.0)-1.14499969953562*10^-5*powf(x,2.0)+5.525722450304775*10^-4*x+6.9622714074416*10^-4)*charfun2(x,20.0,30.0)+
(1.1163558673011502*10^-7*powf(x,3.0)-1.2055681523247334*10^-5*powf(x,2.0)+5.646859355883003*10^-4*x+6.154692036920116*10^-4)*charfun2(x,15.0,20.0)+
(7.388035385732566*10^-7*powf(x,3.0)-4.0278239356188716*10^-5*powf(x,2.0)+9.88024303082421*10^-4*x-.001501222633778596)*charfun2(x,10.0,15.0)+
(-8.221098215144108*10^-8*powf(x,3.0)-1.564780373444778*10^-5*powf(x,2.0)+7.417199468650114*10^-4*x-6.802081130538977*10^-4)*charfun2(x,8.0,10.0)+
(3.546921711766253*10^-6*powf(x,3.0)-1.0274698838847245*10^-4*powf(x,2.0)+.001438513424097209*x-.002538324052339756)*charfun2(x,6.0,8.0)+
(-7.519505882974827*10^-6*powf(x,3.0)+9.6448708316867*10^-5*powf(x,2.0)+2.4333924386517194*10^-4*x-1.4797569187568332*10^-4)*charfun2(x,5.0,6.0)+
(9.79273426151472*10^-6*powf(x,3.0)-1.6323489385047618*10^-4*powf(x,2.0)+.001541757254701888*x-.002312005709936876)*charfun2(x,4.0,5.0)+
(-1.1651431163084654*10^-5*powf(x,3.0)+9.409509124471629*10^-5*powf(x,2.0)+5.12437314321118*10^-4*x-9.395791227625158*10^-4)*charfun2(x,3.0,4.0)+charfun2(x,1.0,1.25)*
(7.642126935979907*10^-4*powf(x,3.0)-.002228440925116606*powf(x,2.0)+.002171631187170024*x-7.074029556514084*10^-4)+charfun2(x,0.8,1.0)*
(1.3630033511723244*10^-4*powf(x,3.0)-3.44703849674331*10^-4*powf(x,2.0)+2.878941117277486*10^-4*x-7.949059717065007*10^-5)+charfun2(x,0.5,0.6)*
(2.59303015857861*10^-5*powf(x,3.0)-4.0539516959888977*10^-5*powf(x,2.0)+2.0996894212812522*10^-5*x-3.60485556465728*10^-6)+charfun2(x,0.3,0.4)*
(1.873658567855629*10^-6*powf(x,3.0)-1.8071578511134517*10^-6*powf(x,2.0)+5.717568256728337*10^-7*x-5.947162243374141*10^-8)+charfun2(x,0.15,0.2)*
(3.591108595660876*10^-7*powf(x,3.0)-1.732383858794119*10^-7*powf(x,2.0)+2.741568054793106*10^-8*x-1.4264875509384362*10^-9)+charfun2(x,0.08,0.1)*
(9.184473034852474*10^-8*powf(x,3.0)-2.3227552666108348*10^-8*powf(x,2.0)+1.9399480593954985*10^-9*x-5.356400962699115*10^-11)+charfun2(x,0.05,0.06)*
(1.7472895829302681*10^-8*powf(x,3.0)-2.731718157873926*10^-9*powf(x,2.0)+1.414856453194774*10^-10*x-2.429098849951893*10^-12)+charfun2(x,0.03,0.04)*
(1.262547636305384*10^-9*powf(x,3.0)-1.217736738431091*10^-10*powf(x,2.0)+3.852730914687716*10^-12*x-4.007440716207866*10^-14)+charfun2(x,0.015,0.02)*
(2.41983558098615*10^-10*powf(x,3.0)-1.167350969695571*10^-11*powf(x,2.0)+1.847380481522311*10^-13*x-9.612255490512563*10^-16)+charfun2(x,0.008,0.01)*
(6.188872876543923*10^-11*powf(x,3.0)-1.565167321852211*10^-12*powf(x,2.0)+1.307216197457262*10^-14*x-3.609361632594436*10^-17)+charfun2(x,0.005,0.006)*
(1.17739435822108*10^-11*powf(x,3.0)-1.840741996640843*10^-13*powf(x,2.0)+9.533873303237445*10^-16*x-1.636824607792965*10^-18)+charfun2(x,0.003,0.004)*
(8.506495363244803*10^-13*powf(x,3.0)-8.204395527914613*10^-15*powf(x,2.0)+2.595673585139652*10^-17*x-2.699818528371902*10^-20)+charfun2(x,0.0015,0.002)*
(1.589999133316786*10^-13*powf(x,3.0)-7.631995839920573*10^-16*powf(x,2.0)+1.200449345654173*10^-18*x-6.200996619935465*10^-22)+charfun2(x,0.002,0.003)*
(-2.464498656641018*10^-13*powf(x,3.0)+1.669499089982625*10^-15*powf(x,2.0)-3.664948002295192*10^-18*x+2.623498569972696*10^-21)+charfun2(x,0.004,0.005)*
(-3.156148279633819*10^-12*powf(x,3.0)+3.987717826358498*10^-14*powf(x,2.0)-1.663695593146018*10^-16*x+2.294368749376121*10^-19)+charfun2(x,0.006,0.008)*
(-1.794910271622986*10^-11*powf(x,3.0)+3.509406337078477*10^-13*powf(x,2.0)-2.256701669907847*10^-15*x+4.783353392670218*10^-18)+charfun2(x,0.01,0.015)*
(-7.171627490860032*10^-11*powf(x,3.0)+2.442982788368976*10^-12*powf(x,2.0)-2.700933912763924*10^-14*x+9.751138734809519*10^-17)+charfun2(x,0.02,0.03)*
(-3.663296788195243*10^-10*powf(x,3.0)+2.482528451813265*10^-11*powf(x,2.0)-5.452378361495361*10^-13*x+3.905280346293858*10^-15)+charfun2(x,0.04,0.05)*
(-4.683860866402012*10^-9*powf(x,3.0)+5.917953464817785*10^-10*powf(x,2.0)-2.469002989830778*10^-11*x+3.404957370111947*10^-13)+charfun2(x,0.06,0.08)*
(-2.6637007897716086*10^-8*powf(x,3.0)+5.208064512989451*10^-9*powf(x,2.0)-3.349013149323252*10^-10*x+7.098640355084159*10^-12)+charfun2(x,0.1,0.15)*
(-1.0642910342081018*10^-7*powf(x,3.0)+3.625459746469214*10^-8*powf(x,2.0)-4.0082669536845505*10^-9*x+1.447098241423438*10^-10)+charfun2(x,0.2,0.3)*
(-5.436442330120889*10^-7*powf(x,3.0)+3.6841466966749414*10^-7*powf(x,2.0)-8.091493056145016*10^-8*x+5.795553189686978*10^-9)+charfun2(x,0.4,0.5)*
(-6.950990038410432*10^-6*powf(x,3.0)+8.782420476405821*10^-6*powf(x,2.0)-3.6640745053348756*10^-6*x+5.053058883672866*10^-7)+charfun2(x,2.0,3.0)*
(-3.418700960917598*10^-5*powf(x,3.0)+2.9691529725953825*10^-4*powf(x,2.0)-9.602330372334767*10^-5*x-3.3111850471804993*10^-4)+charfun2(x,0.6,0.8)*
(-3.953011881249848*10^-5*powf(x,3.0)+7.728923975702324*10^-5*powf(x,2.0)-4.970035981733481*10^-5*x+1.0534595241372187*10^-5)+charfun2(x,1.5,2.0)*
(-1.9958860080980909*10^-4*powf(x,3.0)+.001289324844463337*powf(x,2.0)-.002080842398130946*x+9.920942248870156*10^-4)+charfun2(x,1.25,1.5)*
(-3.282407134088845*10^-4*powf(x,3.0)+.001868259351159177*powf(x,2.0)-.002949244158174704*x+.001426295104908895);

}



#ifdef __GNUG__
    __attribute__((constructor)) static void init_on_dynamic_load(void){
        //Do something automatic here.
        if(VERBOSE) FUNCINFO("Loaded Water.so");
        return;
    }

    __attribute__((destructor)) static void cleanup_on_dynamic_unload(void){
        //Cleanup memory (if needed) automatically here.
        if(VERBOSE) FUNCINFO("Closed Water.so");
        return;
    }
#else
    #warning Being compiled with non-gcc compiler. Unable to use gcc-specific function declarations like 'attribute.' Proceed at your own risk!
#endif 

void toggle_verbosity(bool in){
    VERBOSE = in;
    return;
}



double mean_free_path( const base_particle &in, const double &clamped ){

    //Check if we are dealing with photons.
    if(in.get_type() == Particletype::Photon){ 
        //Grab the energy of the particle.
        const double E = in.get_energy();

        //Determine the total interaction cross-section at this energy. (Probably should not trust tabulated data here, particularly if it
        // has been interpolated!)
        const double s_coherent = photon_coherent(E);
        const double s_compton  = photon_compton(E);
        const double s_photoelectric = photon_photoelectric(E);
        const double s_pair_triplet = photon_pair_triplet(E);
        const double s_tot = s_coherent + s_compton + s_photoelectric + s_pair_triplet;

        return 1.0/s_tot; //   <------ FIXME ------ is mfp = 1/sigma ???
    }

    FUNCERR("Mean free path only implemented for photons for water right now.");
    return 0.0;
}

unsigned char which_interaction( const  base_particle &in, const double &clamped ){

    //Check if we are dealing with photons.
    if(in.get_type() == Particletype::Photon){
        //Grab the energy of the particle.
        const double E = in.get_energy();
    
        //Determine the total interaction cross-section at this energy. (Probably should not trust tabulated data here, particularly if it
        // has been interpolated!)
        const double s_coherent = photon_coherent(E);
        const double s_compton  = photon_compton(E);
        const double s_photoelectric = photon_photoelectric(E);
        const double s_pair_triplet = photon_pair_triplet(E);
        const double s_tot = s_coherent + s_compton + s_photoelectric + s_pair_triplet;
    
        if( (0.0) <= (clamped*s_tot) <= (s_coherent)){
            return INTERACTION_TYPE_RAYLEIGH;
        }else if((s_coherent) < (clamped*s_tot) <= (s_coherent+s_compton)){
            return INTERACTION_TYPE_COMPTON;
        }else if((s_coherent+s_compton) < (clamped*s_tot) <= (s_coherent+s_compton+s_photoelectric)){
            return INTERACTION_TYPE_PHOTOELECTRIC;
        }else{ //}else if((s_coherent+s_compton+s_photoelectric) < (clamped*s_tot) <= (s_coherent+s_compton+s_photoelectric+s_pair_triplet)){
            return INTERACTION_TYPE_PAIR;
        }
    }

    FUNCERR("Mean free path only implemented for photons for water right now.");
    return 0.0;
}



/*
// Look-up table - Mass attenuation coefficients for photons in water. Coefficients are (MeV), (cm*cm/g).
// E | Coherent | Compton | Photoelectric | Pair+Triplet | Total Attenuation | Energy Tansfer | Energy Absorption | 1-g
0.0010 1.37 0.0132 4080 0 4080 4065 4065 1; 
0.0015 1.27 0.0267 1370 0 1380 1372 1372 1;
0.0020 1.15 0.0418 616 0 617 615.2 615.2 0.9999;
0.0030 0.909 0.0707 192 0 193 191.7 191.7 0.9999;
0.0040 0.708 0.0943 82.0 0 82.8 81.92 81.91 0.9999;
0.0050 0.558 0.112 41.9 0 42.6 41.89 41.88 0.9998;
0.0060 0.449 0.126 24.1 0 24.6 24.06 24.05 0.9998;
0.0080 0.31 0.144 9.92 0 10.4 9.918 9.915 0.9998;
0.0100 0.231 0.155 4.94 0 5.33 4.945 4.944 0.9998;
0.0150 0.133 0.17 1.37 0 1.67 1.374 1.374 0.9997;
0.0200 0.0886 0.177 0.544 0 0.81 0.5505 0.5503 0.9997;
0.0300 0.0469 0.183 0.146 0 0.376 0.1557 0.1557 0.9996;
0.0400 0.0287 0.183 0.0568 0 0.268 0.0695 0.06947 0.9996;
0.0500 0.0194 0.18 0.0272 0 0.227 0.04225 0.04223 0.9996;
0.0600 0.0139 0.177 0.0149 0 0.206 0.03191 0.0319 0.9996;
0.0800 0.00816 0.17 0.00577 0 0.184 0.02598 0.02597 0.9996;
0.1000 0.00535 0.163 0.00276 0 0.171 0.02547 0.02546 0.9996;
0.1500 0.00244 0.147 0.000731 0 0.151 0.02765 0.02764 0.9995;
0.2000 0.00139 0.135 0.000289 0 0.137 0.02969 0.02967 0.9994;
0.3000 0.000622 0.118 0.0000816 0 0.119 0.03195 0.03192 0.9992;
0.4000 0.000351 0.106 0.0000349 0 0.106 0.03282 0.03279 0.9989;
0.5000 0.000225 0.0966 0.0000188 0 0.0969 0.03303 0.03299 0.9987;
0.6000 0.000156 0.0894 0.0000117 0 0.0896 0.03289 0.03284 0.9984;
0.8000 0.0000879 0.0786 0.00000592 0 0.0787 0.03212 0.03206 0.998;
1.0000 0.0000563 0.0707 0.00000368 0 0.0707 0.03111 0.03103 0.9975;
1.2500 0.000036 0.0632 0.00000233 0.0000178 0.0632 0.02974 0.02965 0.9969;
1.5000 0.000025 0.0574 0.00000169 0.0000982 0.0575 0.02844 0.02833 0.9962;
2.0000 0.0000141 0.049 0.00000106 0.000391 0.0494 0.02621 0.02608 0.9948;
3.0000 0.00000626 0.0385 0.000000594 0.00113 0.0397 0.023 0.02281 0.9916;
4.0000 0.00000352 0.0322 0.000000408 0.00187 0.034 0.02091 0.02066 0.988;
5.0000 0.00000225 0.0278 0.000000309 0.00254 0.0303 0.1946 0.1915 0.984;
6.0000 0.00000156 0.0245 0.000000248 0.00316 0.0277 0.01843 0.01806 0.98;
8.0000 0.00000088 0.0201 0.000000178 0.00421 0.0243 0.01707 0.01658 0.9716;
10.000 0.000000563 0.0171 0.000000139 0.00509 0.0222 0.01626 0.01566 0.9633;
15.000 0.00000025 0.0127 0.0000000891 0.00675 0.0194 0.01528 0.01441 0.9432;
20.000 0.000000141 0.0102 0.0000000656 0.00798 0.0181 0.01495 0.01382 0.9245;
30.000 0.0000000626 0.0074 0.0000000429 0.00971 0.0171 0.0149 0.01327 0.8904;
40.000 0.0000000352 0.00588 0.0000000319 0.0109 0.0168 0.0151 0.01298 0.86;
50.000 0.0000000225 0.00491 0.0000000253 0.0118 0.0167 0.01537 0.01279 0.8323
*/


/*
if((n>0)&&(n<=2480))
    Photon_Energy(n)=0.25; % Photon Energy in MeV
elseif((n>2480)&&(n<=15000))
    Photon_Energy(n)=0.5; % Photon Energy in MeV
elseif((n>15000)&&(n<=27290))
    Photon_Energy(n)=0.75; % Photon Energy in MeV
elseif((n>27290)&&(n<=37590))
    Photon_Energy(n)=1; % Photon Energy in MeV
elseif((n>37590)&&(n<=46310))
    Photon_Energy(n)=1.25; % Photon Energy in MeV
elseif((n>46310)&&(n<=53760))
    Photon_Energy(n)=1.5; % Photon Energy in MeV
elseif((n>53760)&&(n<=60140))
    Photon_Energy(n)=1.75; % Photon Energy in MeV
elseif((n>60140)&&(n<=65680))
    Photon_Energy(n)=2; % Photon Energy in MeV
elseif((n>65680)&&(n<=70460))
    Photon_Energy(n)=2.25; % Photon Energy in MeV
elseif((n>70460)&&(n<=74630))
    Photon_Energy(n)=2.5; % Photon Energy in MeV
elseif((n>74630)&&(n<=78290))
    Photon_Energy(n)=2.75; % Photon Energy in MeV
elseif((n>78290)&&(n<=81510))
    Photon_Energy(n)=3; % Photon Energy in MeV
elseif((n>81510)&&(n<=84330))
    Photon_Energy(n)=3.25; % Photon Energy in MeV
elseif((n>84330)&&(n<=86860))
    Photon_Energy(n)=3.5; % Photon Energy in MeV
elseif((n>86860)&&(n<=89090))
    Photon_Energy(n)=3.75; % Photon Energy in MeV
elseif((n>89090)&&(n<=91060))
    Photon_Energy(n)=4; % Photon Energy in MeV
elseif((n>91060)&&(n<=92790))
    Photon_Energy(n)=4.25; % Photon Energy in MeV
elseif((n>92790)&&(n<=94330))
    Photon_Energy(n)=4.5; % Photon Energy in MeV
elseif((n>94330)&&(n<=95670))
    Photon_Energy(n)=4.75; % Photon Energy in MeV
elseif((n>95670)&&(n<=96840))
    Photon_Energy(n)=5; % Photon Energy in MeV
elseif((n>96840)&&(n<=97850))
    Photon_Energy(n)=5.25; % Photon Energy in MeV
elseif((n>97850)&&(n<=98710))
    Photon_Energy(n)=5.5; % Photon Energy in MeV
elseif((n>98710)&&(n<=99420))
    Photon_Energy(n)=5.75; % Photon Energy in MeV
elseif((n>99420)&&(n<=100000))
    Photon_Energy(n)=6; % Photon Energy in MeV
end
*/

#ifdef __cplusplus
    }

#endif

